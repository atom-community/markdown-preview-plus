"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const markdownItModule = require("markdown-it");
let markdownIt = null;
let markdownItOptions = null;
let renderLaTeX = null;
let math = null;
let lazyHeaders = null;
let checkBoxes = null;
const mathInline = (text) => `<span class='math'><script type='math/tex'>${text}</script></span>`;
const mathBlock = (text) => `<span class='math'><script type='math/tex; mode=display'>${text}</script></span>`;
const mathDollars = {
    inlineOpen: '$',
    inlineClose: '$',
    blockOpen: '$$',
    blockClose: '$$',
    inlineRenderer: mathInline,
    blockRenderer: mathBlock,
};
const mathBrackets = {
    inlineOpen: '\\(',
    inlineClose: '\\)',
    blockOpen: '\\[',
    blockClose: '\\]',
    inlineRenderer: mathInline,
    blockRenderer: mathBlock,
};
const getOptions = () => ({
    html: true,
    xhtmlOut: false,
    breaks: atom.config.get('markdown-preview-plus.breakOnSingleNewline'),
    langPrefix: 'lang-',
    linkify: true,
    typographer: true,
});
const init = function (rL) {
    renderLaTeX = rL;
    markdownItOptions = getOptions();
    markdownIt = markdownItModule(markdownItOptions);
    if (renderLaTeX) {
        if (math == null) {
            math = require('markdown-it-math');
        }
        markdownIt.use(math, mathDollars);
        markdownIt.use(math, mathBrackets);
    }
    lazyHeaders = atom.config.get('markdown-preview-plus.useLazyHeaders');
    if (lazyHeaders) {
        markdownIt.use(require('markdown-it-lazy-headers'));
    }
    checkBoxes = atom.config.get('markdown-preview-plus.useCheckBoxes');
    if (checkBoxes) {
        markdownIt.use(require('markdown-it-task-lists'));
    }
};
const needsInit = (rL) => markdownIt === null ||
    markdownItOptions === null ||
    markdownItOptions.breaks !==
        atom.config.get('markdown-preview-plus.breakOnSingleNewline') ||
    lazyHeaders !== atom.config.get('markdown-preview-plus.useLazyHeaders') ||
    checkBoxes !== atom.config.get('markdown-preview-plus.useCheckBoxes') ||
    rL !== renderLaTeX;
function render(text, rL) {
    if (needsInit(rL)) {
        init(rL);
    }
    return markdownIt.render(text);
}
exports.render = render;
function decode(url) {
    if (!markdownIt)
        throw new Error('markdownIt not initialized');
    return markdownIt.normalizeLinkText(url);
}
exports.decode = decode;
function getTokens(text, rL) {
    if (needsInit(rL)) {
        init(rL);
    }
    return markdownIt.parse(text, {});
}
exports.getTokens = getTokens;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24taXQtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21hcmtkb3duLWl0LWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGdEQUFnRDtBQUNoRCxJQUFJLFVBQVUsR0FBdUMsSUFBSSxDQUFBO0FBQ3pELElBQUksaUJBQWlCLEdBQW9DLElBQUksQ0FBQTtBQUM3RCxJQUFJLFdBQVcsR0FBbUIsSUFBSSxDQUFBO0FBQ3RDLElBQUksSUFBSSxHQUFRLElBQUksQ0FBQTtBQUNwQixJQUFJLFdBQVcsR0FBUSxJQUFJLENBQUE7QUFDM0IsSUFBSSxVQUFVLEdBQVEsSUFBSSxDQUFBO0FBRTFCLE1BQU0sVUFBVSxHQUFHLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FDbEMsOENBQThDLElBQUksa0JBQWtCLENBQUE7QUFDdEUsTUFBTSxTQUFTLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUNqQyw0REFBNEQsSUFBSSxrQkFBa0IsQ0FBQTtBQUVwRixNQUFNLFdBQVcsR0FBRztJQUNsQixVQUFVLEVBQUUsR0FBRztJQUNmLFdBQVcsRUFBRSxHQUFHO0lBQ2hCLFNBQVMsRUFBRSxJQUFJO0lBQ2YsVUFBVSxFQUFFLElBQUk7SUFDaEIsY0FBYyxFQUFFLFVBQVU7SUFDMUIsYUFBYSxFQUFFLFNBQVM7Q0FDekIsQ0FBQTtBQUVELE1BQU0sWUFBWSxHQUFHO0lBQ25CLFVBQVUsRUFBRSxLQUFLO0lBQ2pCLFdBQVcsRUFBRSxLQUFLO0lBQ2xCLFNBQVMsRUFBRSxLQUFLO0lBQ2hCLFVBQVUsRUFBRSxLQUFLO0lBQ2pCLGNBQWMsRUFBRSxVQUFVO0lBQzFCLGFBQWEsRUFBRSxTQUFTO0NBQ3pCLENBQUE7QUFFRCxNQUFNLFVBQVUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3hCLElBQUksRUFBRSxJQUFJO0lBQ1YsUUFBUSxFQUFFLEtBQUs7SUFDZixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsNENBQTRDLENBQUM7SUFDckUsVUFBVSxFQUFFLE9BQU87SUFDbkIsT0FBTyxFQUFFLElBQUk7SUFDYixXQUFXLEVBQUUsSUFBSTtDQUNsQixDQUFDLENBQUE7QUFFRixNQUFNLElBQUksR0FBRyxVQUFTLEVBQVc7SUFDL0IsV0FBVyxHQUFHLEVBQUUsQ0FBQTtJQUVoQixpQkFBaUIsR0FBRyxVQUFVLEVBQUUsQ0FBQTtJQUVoQyxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtJQUVoRCxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLElBQUksR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUNwQyxDQUFDO1FBQ0QsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUE7UUFDakMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFDcEMsQ0FBQztJQUVELFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFBO0lBRXJFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDaEIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFBO0lBQ3JELENBQUM7SUFFRCxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMscUNBQXFDLENBQUMsQ0FBQTtJQUVuRSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ2YsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFBO0lBQ25ELENBQUM7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLFNBQVMsR0FBRyxDQUFDLEVBQVcsRUFBRSxFQUFFLENBQ2hDLFVBQVUsS0FBSyxJQUFJO0lBQ25CLGlCQUFpQixLQUFLLElBQUk7SUFDMUIsaUJBQWlCLENBQUMsTUFBTTtRQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyw0Q0FBNEMsQ0FBQztJQUMvRCxXQUFXLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLENBQUM7SUFDdkUsVUFBVSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDO0lBQ3JFLEVBQUUsS0FBSyxXQUFXLENBQUE7QUFFcEIsZ0JBQXVCLElBQVksRUFBRSxFQUFXO0lBQzlDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ1YsQ0FBQztJQUNELE1BQU0sQ0FBQyxVQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ2pDLENBQUM7QUFMRCx3QkFLQztBQUVELGdCQUF1QixHQUFXO0lBQ2hDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO1FBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFBO0lBQzlELE1BQU0sQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDMUMsQ0FBQztBQUhELHdCQUdDO0FBRUQsbUJBQTBCLElBQVksRUFBRSxFQUFXO0lBQ2pELEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ1YsQ0FBQztJQUNELE1BQU0sQ0FBQyxVQUFXLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUNwQyxDQUFDO0FBTEQsOEJBS0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWFya2Rvd25JdE1vZHVsZSA9IHJlcXVpcmUoJ21hcmtkb3duLWl0JylcbmxldCBtYXJrZG93bkl0OiBtYXJrZG93bkl0TW9kdWxlLk1hcmtkb3duSXQgfCBudWxsID0gbnVsbFxubGV0IG1hcmtkb3duSXRPcHRpb25zOiBtYXJrZG93bkl0TW9kdWxlLk9wdGlvbnMgfCBudWxsID0gbnVsbFxubGV0IHJlbmRlckxhVGVYOiBib29sZWFuIHwgbnVsbCA9IG51bGxcbmxldCBtYXRoOiBhbnkgPSBudWxsXG5sZXQgbGF6eUhlYWRlcnM6IGFueSA9IG51bGxcbmxldCBjaGVja0JveGVzOiBhbnkgPSBudWxsXG5cbmNvbnN0IG1hdGhJbmxpbmUgPSAodGV4dDogc3RyaW5nKSA9PlxuICBgPHNwYW4gY2xhc3M9J21hdGgnPjxzY3JpcHQgdHlwZT0nbWF0aC90ZXgnPiR7dGV4dH08L3NjcmlwdD48L3NwYW4+YFxuY29uc3QgbWF0aEJsb2NrID0gKHRleHQ6IHN0cmluZykgPT5cbiAgYDxzcGFuIGNsYXNzPSdtYXRoJz48c2NyaXB0IHR5cGU9J21hdGgvdGV4OyBtb2RlPWRpc3BsYXknPiR7dGV4dH08L3NjcmlwdD48L3NwYW4+YFxuXG5jb25zdCBtYXRoRG9sbGFycyA9IHtcbiAgaW5saW5lT3BlbjogJyQnLFxuICBpbmxpbmVDbG9zZTogJyQnLFxuICBibG9ja09wZW46ICckJCcsXG4gIGJsb2NrQ2xvc2U6ICckJCcsXG4gIGlubGluZVJlbmRlcmVyOiBtYXRoSW5saW5lLFxuICBibG9ja1JlbmRlcmVyOiBtYXRoQmxvY2ssXG59XG5cbmNvbnN0IG1hdGhCcmFja2V0cyA9IHtcbiAgaW5saW5lT3BlbjogJ1xcXFwoJyxcbiAgaW5saW5lQ2xvc2U6ICdcXFxcKScsXG4gIGJsb2NrT3BlbjogJ1xcXFxbJyxcbiAgYmxvY2tDbG9zZTogJ1xcXFxdJyxcbiAgaW5saW5lUmVuZGVyZXI6IG1hdGhJbmxpbmUsXG4gIGJsb2NrUmVuZGVyZXI6IG1hdGhCbG9jayxcbn1cblxuY29uc3QgZ2V0T3B0aW9ucyA9ICgpID0+ICh7XG4gIGh0bWw6IHRydWUsXG4gIHhodG1sT3V0OiBmYWxzZSxcbiAgYnJlYWtzOiBhdG9tLmNvbmZpZy5nZXQoJ21hcmtkb3duLXByZXZpZXctcGx1cy5icmVha09uU2luZ2xlTmV3bGluZScpLFxuICBsYW5nUHJlZml4OiAnbGFuZy0nLFxuICBsaW5raWZ5OiB0cnVlLFxuICB0eXBvZ3JhcGhlcjogdHJ1ZSxcbn0pXG5cbmNvbnN0IGluaXQgPSBmdW5jdGlvbihyTDogYm9vbGVhbikge1xuICByZW5kZXJMYVRlWCA9IHJMXG5cbiAgbWFya2Rvd25JdE9wdGlvbnMgPSBnZXRPcHRpb25zKClcblxuICBtYXJrZG93bkl0ID0gbWFya2Rvd25JdE1vZHVsZShtYXJrZG93bkl0T3B0aW9ucylcblxuICBpZiAocmVuZGVyTGFUZVgpIHtcbiAgICBpZiAobWF0aCA9PSBudWxsKSB7XG4gICAgICBtYXRoID0gcmVxdWlyZSgnbWFya2Rvd24taXQtbWF0aCcpXG4gICAgfVxuICAgIG1hcmtkb3duSXQudXNlKG1hdGgsIG1hdGhEb2xsYXJzKVxuICAgIG1hcmtkb3duSXQudXNlKG1hdGgsIG1hdGhCcmFja2V0cylcbiAgfVxuXG4gIGxhenlIZWFkZXJzID0gYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMudXNlTGF6eUhlYWRlcnMnKVxuXG4gIGlmIChsYXp5SGVhZGVycykge1xuICAgIG1hcmtkb3duSXQudXNlKHJlcXVpcmUoJ21hcmtkb3duLWl0LWxhenktaGVhZGVycycpKVxuICB9XG5cbiAgY2hlY2tCb3hlcyA9IGF0b20uY29uZmlnLmdldCgnbWFya2Rvd24tcHJldmlldy1wbHVzLnVzZUNoZWNrQm94ZXMnKVxuXG4gIGlmIChjaGVja0JveGVzKSB7XG4gICAgbWFya2Rvd25JdC51c2UocmVxdWlyZSgnbWFya2Rvd24taXQtdGFzay1saXN0cycpKVxuICB9XG59XG5cbmNvbnN0IG5lZWRzSW5pdCA9IChyTDogYm9vbGVhbikgPT5cbiAgbWFya2Rvd25JdCA9PT0gbnVsbCB8fFxuICBtYXJrZG93bkl0T3B0aW9ucyA9PT0gbnVsbCB8fFxuICBtYXJrZG93bkl0T3B0aW9ucy5icmVha3MgIT09XG4gICAgYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMuYnJlYWtPblNpbmdsZU5ld2xpbmUnKSB8fFxuICBsYXp5SGVhZGVycyAhPT0gYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMudXNlTGF6eUhlYWRlcnMnKSB8fFxuICBjaGVja0JveGVzICE9PSBhdG9tLmNvbmZpZy5nZXQoJ21hcmtkb3duLXByZXZpZXctcGx1cy51c2VDaGVja0JveGVzJykgfHxcbiAgckwgIT09IHJlbmRlckxhVGVYXG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIodGV4dDogc3RyaW5nLCByTDogYm9vbGVhbikge1xuICBpZiAobmVlZHNJbml0KHJMKSkge1xuICAgIGluaXQockwpXG4gIH1cbiAgcmV0dXJuIG1hcmtkb3duSXQhLnJlbmRlcih0ZXh0KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKHVybDogc3RyaW5nKSB7XG4gIGlmICghbWFya2Rvd25JdCkgdGhyb3cgbmV3IEVycm9yKCdtYXJrZG93bkl0IG5vdCBpbml0aWFsaXplZCcpXG4gIHJldHVybiBtYXJrZG93bkl0Lm5vcm1hbGl6ZUxpbmtUZXh0KHVybClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRva2Vucyh0ZXh0OiBzdHJpbmcsIHJMOiBib29sZWFuKSB7XG4gIGlmIChuZWVkc0luaXQockwpKSB7XG4gICAgaW5pdChyTClcbiAgfVxuICByZXR1cm4gbWFya2Rvd25JdCEucGFyc2UodGV4dCwge30pXG59XG4iXX0=