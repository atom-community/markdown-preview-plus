"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const markdown_preview_view_1 = require("./markdown-preview-view");
const atom_1 = require("atom");
const util_1 = require("./util");
let imageRegister = {};
const refreshImages = _.debounce(async function (src) {
    for (const item of atom.workspace.getPaneItems()) {
        if (item instanceof markdown_preview_view_1.MarkdownPreviewView) {
            await item.refreshImages(src);
        }
    }
}, 250);
function srcClosure(src, event) {
    return function () {
        const i = imageRegister[src];
        if (!i)
            return;
        if (event === 'change' && util_1.isFileSync(src)) {
            i.version = Date.now();
        }
        else {
            i.watcher.dispose();
            delete imageRegister[src];
        }
        util_1.handlePromise(refreshImages(src));
    };
}
function removeFile(file) {
    imageRegister = _.mapValues(imageRegister, function (image) {
        if (!image)
            return image;
        image.files = _.without(image.files, file);
        image.files = _.filter(image.files, util_1.isFileSync);
        if (_.isEmpty(image.files)) {
            image.watched = false;
            image.watcher.dispose();
        }
        return image;
    });
}
exports.removeFile = removeFile;
async function getVersion(image, file) {
    let version;
    const i = imageRegister[image];
    if (!i) {
        if (util_1.isFileSync(image)) {
            version = Date.now();
            const watcher = new atom_1.CompositeDisposable();
            const af = new atom_1.File(image);
            watcher.add(af.onDidChange(srcClosure(image, 'change')), af.onDidDelete(srcClosure(image, 'delete')), af.onDidRename(srcClosure(image, 'rename')));
            imageRegister[image] = {
                path: image,
                watched: true,
                files: file ? [file] : [],
                version,
                watcher,
            };
            return version;
        }
        else {
            return false;
        }
    }
    const files = i.files;
    if (file && !files.includes(file)) {
        i.files.push(file);
    }
    version = i.version;
    if (!version && util_1.isFileSync(image)) {
        version = Date.now();
        i.version = version;
    }
    return version;
}
exports.getVersion = getVersion;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utd2F0Y2gtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ltYWdlLXdhdGNoLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRCQUE0QjtBQUM1QixtRUFBNkQ7QUFDN0QsK0JBQWdEO0FBQ2hELGlDQUFrRDtBQVVsRCxJQUFJLGFBQWEsR0FFYixFQUFFLENBQUE7QUFFTixNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssV0FBVSxHQUFXO0lBQ3pELEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsRUFBRTtRQUNoRCxJQUFJLElBQUksWUFBWSwyQ0FBbUIsRUFBRTtZQUV2QyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUE7U0FDOUI7S0FDRjtBQUNILENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQTtBQUVQLG9CQUFvQixHQUFXLEVBQUUsS0FBcUM7SUFDcEUsT0FBTztRQUNMLE1BQU0sQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUM1QixJQUFJLENBQUMsQ0FBQztZQUFFLE9BQU07UUFDZCxJQUFJLEtBQUssS0FBSyxRQUFRLElBQUksaUJBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN6QyxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtTQUN2QjthQUFNO1lBQ0wsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtZQUNuQixPQUFPLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtTQUMxQjtRQUNELG9CQUFhLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDbkMsQ0FBQyxDQUFBO0FBQ0gsQ0FBQztBQUVELG9CQUEyQixJQUFZO0lBQ3JDLGFBQWEsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxVQUFTLEtBQUs7UUFDdkQsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPLEtBQUssQ0FBQTtRQUN4QixLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUMxQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxpQkFBVSxDQUFDLENBQUE7UUFDL0MsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQixLQUFLLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQTtZQUNyQixLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO1NBQ3hCO1FBQ0QsT0FBTyxLQUFLLENBQUE7SUFDZCxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFYRCxnQ0FXQztBQUVNLEtBQUsscUJBQXFCLEtBQWEsRUFBRSxJQUFhO0lBQzNELElBQUksT0FBTyxDQUFBO0lBQ1gsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzlCLElBQUksQ0FBQyxDQUFDLEVBQUU7UUFDTixJQUFJLGlCQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDckIsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUNwQixNQUFNLE9BQU8sR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7WUFDekMsTUFBTSxFQUFFLEdBQUcsSUFBSSxXQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FDVCxFQUFFLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFDM0MsRUFBRSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQzNDLEVBQUUsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUM1QyxDQUFBO1lBQ0QsYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHO2dCQUNyQixJQUFJLEVBQUUsS0FBSztnQkFDWCxPQUFPLEVBQUUsSUFBSTtnQkFDYixLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN6QixPQUFPO2dCQUNQLE9BQU87YUFDUixDQUFBO1lBQ0QsT0FBTyxPQUFPLENBQUE7U0FDZjthQUFNO1lBQ0wsT0FBTyxLQUFLLENBQUE7U0FDYjtLQUNGO0lBRUQsTUFBTSxLQUFLLEdBQWEsQ0FBQyxDQUFDLEtBQUssQ0FBQTtJQUMvQixJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDakMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7S0FDbkI7SUFFRCxPQUFPLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQTtJQUNuQixJQUFJLENBQUMsT0FBTyxJQUFJLGlCQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDakMsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtRQUNwQixDQUFDLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtLQUNwQjtJQUNELE9BQU8sT0FBTyxDQUFBO0FBQ2hCLENBQUM7QUFyQ0QsZ0NBcUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKVxuaW1wb3J0IHsgTWFya2Rvd25QcmV2aWV3VmlldyB9IGZyb20gJy4vbWFya2Rvd24tcHJldmlldy12aWV3J1xuaW1wb3J0IHsgQ29tcG9zaXRlRGlzcG9zYWJsZSwgRmlsZSB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyBoYW5kbGVQcm9taXNlLCBpc0ZpbGVTeW5jIH0gZnJvbSAnLi91dGlsJ1xuXG5pbnRlcmZhY2UgSW1hZ2VSZWdpc3RlclJlYyB7XG4gIHZlcnNpb246IG51bWJlclxuICB3YXRjaGVyOiBDb21wb3NpdGVEaXNwb3NhYmxlXG4gIGZpbGVzOiBzdHJpbmdbXVxuICB3YXRjaGVkOiBib29sZWFuXG4gIHBhdGg6IHN0cmluZ1xufVxuXG5sZXQgaW1hZ2VSZWdpc3Rlcjoge1xuICBba2V5OiBzdHJpbmddOiBJbWFnZVJlZ2lzdGVyUmVjIHwgdW5kZWZpbmVkXG59ID0ge31cblxuY29uc3QgcmVmcmVzaEltYWdlcyA9IF8uZGVib3VuY2UoYXN5bmMgZnVuY3Rpb24oc3JjOiBzdHJpbmcpIHtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGF0b20ud29ya3NwYWNlLmdldFBhbmVJdGVtcygpKSB7XG4gICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBNYXJrZG93blByZXZpZXdWaWV3KSB7XG4gICAgICAvLyBUT0RPOiBjaGVjayBhZ2FpbnN0IGltYWdlUmVnaXN0ZXJbc3JjXS52ZXJzaW9uLmZpbGVzXG4gICAgICBhd2FpdCBpdGVtLnJlZnJlc2hJbWFnZXMoc3JjKVxuICAgIH1cbiAgfVxufSwgMjUwKVxuXG5mdW5jdGlvbiBzcmNDbG9zdXJlKHNyYzogc3RyaW5nLCBldmVudDogJ2NoYW5nZScgfCAnZGVsZXRlJyB8ICdyZW5hbWUnKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBpID0gaW1hZ2VSZWdpc3RlcltzcmNdXG4gICAgaWYgKCFpKSByZXR1cm5cbiAgICBpZiAoZXZlbnQgPT09ICdjaGFuZ2UnICYmIGlzRmlsZVN5bmMoc3JjKSkge1xuICAgICAgaS52ZXJzaW9uID0gRGF0ZS5ub3coKVxuICAgIH0gZWxzZSB7XG4gICAgICBpLndhdGNoZXIuZGlzcG9zZSgpXG4gICAgICBkZWxldGUgaW1hZ2VSZWdpc3RlcltzcmNdXG4gICAgfVxuICAgIGhhbmRsZVByb21pc2UocmVmcmVzaEltYWdlcyhzcmMpKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGaWxlKGZpbGU6IHN0cmluZykge1xuICBpbWFnZVJlZ2lzdGVyID0gXy5tYXBWYWx1ZXMoaW1hZ2VSZWdpc3RlciwgZnVuY3Rpb24oaW1hZ2UpIHtcbiAgICBpZiAoIWltYWdlKSByZXR1cm4gaW1hZ2VcbiAgICBpbWFnZS5maWxlcyA9IF8ud2l0aG91dChpbWFnZS5maWxlcywgZmlsZSlcbiAgICBpbWFnZS5maWxlcyA9IF8uZmlsdGVyKGltYWdlLmZpbGVzLCBpc0ZpbGVTeW5jKVxuICAgIGlmIChfLmlzRW1wdHkoaW1hZ2UuZmlsZXMpKSB7XG4gICAgICBpbWFnZS53YXRjaGVkID0gZmFsc2VcbiAgICAgIGltYWdlLndhdGNoZXIuZGlzcG9zZSgpXG4gICAgfVxuICAgIHJldHVybiBpbWFnZVxuICB9KVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VmVyc2lvbihpbWFnZTogc3RyaW5nLCBmaWxlPzogc3RyaW5nKSB7XG4gIGxldCB2ZXJzaW9uXG4gIGNvbnN0IGkgPSBpbWFnZVJlZ2lzdGVyW2ltYWdlXVxuICBpZiAoIWkpIHtcbiAgICBpZiAoaXNGaWxlU3luYyhpbWFnZSkpIHtcbiAgICAgIHZlcnNpb24gPSBEYXRlLm5vdygpXG4gICAgICBjb25zdCB3YXRjaGVyID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICAgICAgY29uc3QgYWYgPSBuZXcgRmlsZShpbWFnZSlcbiAgICAgIHdhdGNoZXIuYWRkKFxuICAgICAgICBhZi5vbkRpZENoYW5nZShzcmNDbG9zdXJlKGltYWdlLCAnY2hhbmdlJykpLFxuICAgICAgICBhZi5vbkRpZERlbGV0ZShzcmNDbG9zdXJlKGltYWdlLCAnZGVsZXRlJykpLFxuICAgICAgICBhZi5vbkRpZFJlbmFtZShzcmNDbG9zdXJlKGltYWdlLCAncmVuYW1lJykpLFxuICAgICAgKVxuICAgICAgaW1hZ2VSZWdpc3RlcltpbWFnZV0gPSB7XG4gICAgICAgIHBhdGg6IGltYWdlLFxuICAgICAgICB3YXRjaGVkOiB0cnVlLFxuICAgICAgICBmaWxlczogZmlsZSA/IFtmaWxlXSA6IFtdLFxuICAgICAgICB2ZXJzaW9uLFxuICAgICAgICB3YXRjaGVyLFxuICAgICAgfVxuICAgICAgcmV0dXJuIHZlcnNpb25cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgY29uc3QgZmlsZXM6IHN0cmluZ1tdID0gaS5maWxlc1xuICBpZiAoZmlsZSAmJiAhZmlsZXMuaW5jbHVkZXMoZmlsZSkpIHtcbiAgICBpLmZpbGVzLnB1c2goZmlsZSlcbiAgfVxuXG4gIHZlcnNpb24gPSBpLnZlcnNpb25cbiAgaWYgKCF2ZXJzaW9uICYmIGlzRmlsZVN5bmMoaW1hZ2UpKSB7XG4gICAgdmVyc2lvbiA9IERhdGUubm93KClcbiAgICBpLnZlcnNpb24gPSB2ZXJzaW9uXG4gIH1cbiAgcmV0dXJuIHZlcnNpb25cbn1cbiJdfQ==