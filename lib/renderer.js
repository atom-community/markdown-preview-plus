"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const highlight = require("atom-highlight");
const pandocHelper = require("./pandoc-helper");
const markdownIt = require("./markdown-it-helper");
const extension_helper_1 = require("./extension-helper");
const imageWatcher = require("./image-watch-helper");
const util_1 = require("./util");
const util_common_1 = require("./util-common");
const { resourcePath } = atom.getLoadSettings();
const packagePath = path.dirname(__dirname);
async function render(text, filePath, grammar, renderLaTeX, mode, savePath) {
    text = text.replace(/^\s*<!doctype(\s+.*)?>\s*/i, '');
    let html;
    let error;
    if (util_1.atomConfig().renderer === 'pandoc') {
        try {
            html = await pandocHelper.renderPandoc(text, filePath, renderLaTeX);
        }
        catch (err) {
            const e = err;
            if (e.html === undefined)
                throw e;
            error = e.message;
            html = e.html;
        }
    }
    else {
        html = markdownIt.render(text, renderLaTeX);
    }
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, 'text/html');
    sanitize(doc);
    if (mode === 'normal') {
        await resolveImagePaths(doc, filePath, {
            version: true,
            relativize: false,
        });
    }
    else {
        let behaviour;
        switch (mode) {
            case 'save':
                behaviour = util_1.atomConfig().saveConfig.mediaOnSaveAsHTMLBehaviour;
                break;
            case 'copy':
                behaviour = util_1.atomConfig().saveConfig.mediaOnCopyAsHTMLBehaviour;
                break;
            default:
                throw invalidMode(mode);
        }
        await handleImages({ doc, filePath, savePath, behaviour });
    }
    let defaultCodeLanguage = 'text';
    if ((grammar && grammar.scopeName) === 'source.litcoffee') {
        defaultCodeLanguage = 'coffee';
    }
    if (!(util_1.atomConfig().renderer === 'pandoc' &&
        util_1.atomConfig().pandocConfig.useNativePandocCodeStyles)) {
        highlightCodeBlocks(doc, defaultCodeLanguage, mode !== 'normal');
    }
    if (error) {
        const errd = doc.createElement('div');
        const msgel = doc.createElement('code');
        msgel.innerText = error;
        errd.innerHTML = `<h1>Pandoc Error:</h1>${msgel.outerHTML}<hr>`;
        doc.body.insertBefore(errd, doc.body.firstElementChild);
    }
    return doc;
}
exports.render = render;
function invalidMode(mode) {
    return new Error(`Invalid render mode ${mode}`);
}
function sanitize(doc) {
    doc.querySelectorAll("script:not([type^='math/tex'])").forEach((elem) => {
        elem.remove();
    });
    const attributesToRemove = [
        'onabort',
        'onblur',
        'onchange',
        'onclick',
        'ondbclick',
        'onerror',
        'onfocus',
        'onkeydown',
        'onkeypress',
        'onkeyup',
        'onload',
        'onmousedown',
        'onmousemove',
        'onmouseover',
        'onmouseout',
        'onmouseup',
        'onreset',
        'onresize',
        'onscroll',
        'onselect',
        'onsubmit',
        'onunload',
    ];
    doc.querySelectorAll('*').forEach((elem) => attributesToRemove.map((attribute) => {
        elem.removeAttribute(attribute);
    }));
}
async function handleImages(opts) {
    const relativize = opts.behaviour === 'relativized';
    switch (opts.behaviour) {
        case 'relativized':
        case 'absolutized':
            await resolveImagePaths(opts.doc, opts.filePath, {
                version: false,
                relativize,
            }, opts.savePath);
            break;
        case 'untouched':
    }
}
async function resolveImagePaths(doc, filePath, options, savePath) {
    const [rootDirectory] = atom.project.relativizePath(filePath || '');
    const media = util_common_1.getMedia(doc);
    await Promise.all(Array.from(media).map(async function (img) {
        let src = img.getAttribute('src');
        if (src) {
            if (util_1.atomConfig().renderer !== 'pandoc') {
                src = decodeURI(src);
            }
            if (src.match(/^(https?|atom|data):/)) {
                return;
            }
            if (process.resourcesPath && src.startsWith(process.resourcesPath)) {
                return;
            }
            if (src.startsWith(resourcePath)) {
                return;
            }
            if (src.startsWith(packagePath)) {
                return;
            }
            if (src[0] === '/') {
                if (!util_1.isFileSync(src)) {
                    try {
                        if (rootDirectory !== null) {
                            src = path.join(rootDirectory, src.substring(1));
                        }
                    }
                    catch (e) {
                    }
                }
            }
            else if (filePath) {
                src = path.resolve(path.dirname(filePath), src);
            }
            if (options.relativize &&
                (filePath !== undefined || savePath !== undefined)) {
                const fp = savePath !== undefined ? savePath : filePath;
                src = path.relative(path.dirname(fp), src);
            }
            if (options.version) {
                const v = await imageWatcher.getVersion(src, filePath);
                if (v) {
                    src = `${src}?v=${v}`;
                }
            }
            img.src = src;
        }
        return;
    }));
}
function highlightCodeBlocks(domFragment, defaultLanguage, copyHTML) {
    const fontFamily = atom.config.get('editor.fontFamily');
    if (fontFamily) {
        for (const codeElement of Array.from(domFragment.querySelectorAll('code'))) {
            codeElement.style.fontFamily = fontFamily;
        }
    }
    for (const preElement of Array.from(domFragment.querySelectorAll('pre'))) {
        const codeBlock = preElement.firstElementChild !== null
            ? preElement.firstElementChild
            : preElement;
        const cbClass = codeBlock.className;
        const fenceName = cbClass
            ? cbClass.replace(/^(lang-|sourceCode )/, '')
            : defaultLanguage;
        const addClass = copyHTML ? 'editor-colors ' : '';
        preElement.outerHTML = highlight({
            fileContents: codeBlock.textContent.replace(/\n$/, ''),
            scopeName: extension_helper_1.scopeForFenceName(fenceName),
            nbsp: false,
            lineDivs: copyHTML ? false : true,
            editorDiv: true,
            editorDivTag: copyHTML ? 'pre' : 'atom-text-editor',
            editorDivClass: fenceName ? `${addClass}lang-${fenceName}` : addClass,
        });
    }
    return domFragment;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmVuZGVyZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNkI7QUFDN0IsNENBQTRDO0FBQzVDLGdEQUFnRDtBQUNoRCxtREFBbUQ7QUFDbkQseURBQXNEO0FBQ3RELHFEQUFxRDtBQUVyRCxpQ0FBK0M7QUFDL0MsK0NBQXdDO0FBRXhDLE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUE7QUFDL0MsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUlwQyxLQUFLLGlCQUNWLElBQVksRUFDWixRQUE0QixFQUM1QixPQUE0QixFQUM1QixXQUFvQixFQUNwQixJQUFnQixFQUNoQixRQUFpQjtJQUlqQixJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyw0QkFBNEIsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUVyRCxJQUFJLElBQUksQ0FBQTtJQUNSLElBQUksS0FBSyxDQUFBO0lBQ1QsSUFBSSxpQkFBVSxFQUFFLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRTtRQUN0QyxJQUFJO1lBQ0YsSUFBSSxHQUFHLE1BQU0sWUFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFBO1NBQ3BFO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixNQUFNLENBQUMsR0FBRyxHQUFnQyxDQUFBO1lBQzFDLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTO2dCQUFFLE1BQU0sQ0FBQyxDQUFBO1lBQ2pDLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBaUIsQ0FBQTtZQUMzQixJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQWMsQ0FBQTtTQUN4QjtLQUNGO1NBQU07UUFDTCxJQUFJLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUE7S0FDNUM7SUFDRCxNQUFNLE1BQU0sR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFBO0lBQzlCLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQ3JELFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNiLElBQUksSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUNyQixNQUFNLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUU7WUFDckMsT0FBTyxFQUFFLElBQUk7WUFDYixVQUFVLEVBQUUsS0FBSztTQUNsQixDQUFDLENBQUE7S0FDSDtTQUFNO1FBQ0wsSUFBSSxTQUFzRixDQUFBO1FBQzFGLFFBQVEsSUFBSSxFQUFFO1lBQ1osS0FBSyxNQUFNO2dCQUNULFNBQVMsR0FBRyxpQkFBVSxFQUFFLENBQUMsVUFBVSxDQUFDLDBCQUEwQixDQUFBO2dCQUM5RCxNQUFLO1lBQ1AsS0FBSyxNQUFNO2dCQUNULFNBQVMsR0FBRyxpQkFBVSxFQUFFLENBQUMsVUFBVSxDQUFDLDBCQUEwQixDQUFBO2dCQUM5RCxNQUFLO1lBQ1A7Z0JBQ0UsTUFBTSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDMUI7UUFDRCxNQUFNLFlBQVksQ0FBQyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUE7S0FDM0Q7SUFDRCxJQUFJLG1CQUFtQixHQUFXLE1BQU0sQ0FBQTtJQUV4QyxJQUFJLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxrQkFBa0IsRUFBRTtRQUN6RCxtQkFBbUIsR0FBRyxRQUFRLENBQUE7S0FDL0I7SUFDRCxJQUNFLENBQUMsQ0FDQyxpQkFBVSxFQUFFLENBQUMsUUFBUSxLQUFLLFFBQVE7UUFDbEMsaUJBQVUsRUFBRSxDQUFDLFlBQVksQ0FBQyx5QkFBeUIsQ0FDcEQsRUFDRDtRQUNBLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUE7S0FDakU7SUFDRCxJQUFJLEtBQUssRUFBRTtRQUNULE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDckMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUN2QyxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQTtRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLHlCQUF5QixLQUFLLENBQUMsU0FBUyxNQUFNLENBQUE7UUFDL0QsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtLQUN4RDtJQUNELE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQztBQXJFRCx3QkFxRUM7QUFFRCxxQkFBcUIsSUFBVztJQUM5QixPQUFPLElBQUksS0FBSyxDQUFDLHVCQUF1QixJQUFJLEVBQUUsQ0FBQyxDQUFBO0FBQ2pELENBQUM7QUFFRCxrQkFBa0IsR0FBaUI7SUFFakMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLGdDQUFnQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDdEUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQ2YsQ0FBQyxDQUFDLENBQUE7SUFDRixNQUFNLGtCQUFrQixHQUFHO1FBQ3pCLFNBQVM7UUFDVCxRQUFRO1FBQ1IsVUFBVTtRQUNWLFNBQVM7UUFDVCxXQUFXO1FBQ1gsU0FBUztRQUNULFNBQVM7UUFDVCxXQUFXO1FBQ1gsWUFBWTtRQUNaLFNBQVM7UUFDVCxRQUFRO1FBQ1IsYUFBYTtRQUNiLGFBQWE7UUFDYixhQUFhO1FBQ2IsWUFBWTtRQUNaLFdBQVc7UUFDWCxTQUFTO1FBQ1QsVUFBVTtRQUNWLFVBQVU7UUFDVixVQUFVO1FBQ1YsVUFBVTtRQUNWLFVBQVU7S0FDWCxDQUFBO0lBQ0QsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQ3pDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO1FBQ25DLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDakMsQ0FBQyxDQUFDLENBQ0gsQ0FBQTtBQUNILENBQUM7QUFFRCxLQUFLLHVCQUF1QixJQUszQjtJQUNDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLEtBQUssYUFBYSxDQUFBO0lBQ25ELFFBQVEsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUN0QixLQUFLLGFBQWEsQ0FBQztRQUNuQixLQUFLLGFBQWE7WUFDaEIsTUFBTSxpQkFBaUIsQ0FDckIsSUFBSSxDQUFDLEdBQUcsRUFDUixJQUFJLENBQUMsUUFBUSxFQUNiO2dCQUNFLE9BQU8sRUFBRSxLQUFLO2dCQUNkLFVBQVU7YUFDWCxFQUNELElBQUksQ0FBQyxRQUFRLENBQ2QsQ0FBQTtZQUNELE1BQUs7UUFDUCxLQUFLLFdBQVcsQ0FBQztLQUVsQjtBQUNILENBQUM7QUFFRCxLQUFLLDRCQUNILEdBQWlCLEVBQ2pCLFFBQTRCLEVBQzVCLE9BQWtELEVBQ2xELFFBQWlCO0lBRWpCLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLENBQUE7SUFDbkUsTUFBTSxLQUFLLEdBQUcsc0JBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUMzQixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2YsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxXQUFVLEdBQUc7UUFDdEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNqQyxJQUFJLEdBQUcsRUFBRTtZQUNQLElBQUksaUJBQVUsRUFBRSxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUU7Z0JBQ3RDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUE7YUFDckI7WUFFRCxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsRUFBRTtnQkFDckMsT0FBTTthQUNQO1lBQ0QsSUFBSSxPQUFPLENBQUMsYUFBYSxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxFQUFFO2dCQUNsRSxPQUFNO2FBQ1A7WUFDRCxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQUU7Z0JBQ2hDLE9BQU07YUFDUDtZQUNELElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBRTtnQkFDL0IsT0FBTTthQUNQO1lBRUQsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO2dCQUNsQixJQUFJLENBQUMsaUJBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDcEIsSUFBSTt3QkFDRixJQUFJLGFBQWEsS0FBSyxJQUFJLEVBQUU7NEJBQzFCLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7eUJBQ2pEO3FCQUNGO29CQUFDLE9BQU8sQ0FBQyxFQUFFO3FCQUVYO2lCQUNGO2FBQ0Y7aUJBQU0sSUFBSSxRQUFRLEVBQUU7Z0JBQ25CLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7YUFDaEQ7WUFFRCxJQUNFLE9BQU8sQ0FBQyxVQUFVO2dCQUNsQixDQUFDLFFBQVEsS0FBSyxTQUFTLElBQUksUUFBUSxLQUFLLFNBQVMsQ0FBQyxFQUNsRDtnQkFDQSxNQUFNLEVBQUUsR0FBRyxRQUFRLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVMsQ0FBQTtnQkFDeEQsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQTthQUMzQztZQUdELElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtnQkFDbkIsTUFBTSxDQUFDLEdBQUcsTUFBTSxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQTtnQkFDdEQsSUFBSSxDQUFDLEVBQUU7b0JBQ0wsR0FBRyxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFBO2lCQUN0QjthQUNGO1lBRUQsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUE7U0FDZDtRQUNELE9BQU07SUFDUixDQUFDLENBQUMsQ0FDSCxDQUFBO0FBQ0gsQ0FBQztBQUVELDZCQUNFLFdBQXFCLEVBQ3JCLGVBQXVCLEVBQ3ZCLFFBQWlCO0lBRWpCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUE7SUFDdkQsSUFBSSxVQUFVLEVBQUU7UUFDZCxLQUFLLE1BQU0sV0FBVyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQ2xDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FDckMsRUFBRTtZQUNELFdBQVcsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQTtTQUMxQztLQUNGO0lBRUQsS0FBSyxNQUFNLFVBQVUsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQ3hFLE1BQU0sU0FBUyxHQUNiLFVBQVUsQ0FBQyxpQkFBaUIsS0FBSyxJQUFJO1lBQ25DLENBQUMsQ0FBQyxVQUFVLENBQUMsaUJBQWlCO1lBQzlCLENBQUMsQ0FBQyxVQUFVLENBQUE7UUFDaEIsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQTtRQUNuQyxNQUFNLFNBQVMsR0FBRyxPQUFPO1lBQ3ZCLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLHNCQUFzQixFQUFFLEVBQUUsQ0FBQztZQUM3QyxDQUFDLENBQUMsZUFBZSxDQUFBO1FBRW5CLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtRQUNqRCxVQUFVLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztZQUMvQixZQUFZLEVBQUUsU0FBUyxDQUFDLFdBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztZQUN2RCxTQUFTLEVBQUUsb0NBQWlCLENBQUMsU0FBUyxDQUFDO1lBQ3ZDLElBQUksRUFBRSxLQUFLO1lBQ1gsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJO1lBQ2pDLFNBQVMsRUFBRSxJQUFJO1lBQ2YsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxrQkFBa0I7WUFFbkQsY0FBYyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLFFBQVEsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVE7U0FDdEUsQ0FBQyxDQUFBO0tBQ0g7SUFFRCxPQUFPLFdBQVcsQ0FBQTtBQUNwQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcbmltcG9ydCBoaWdobGlnaHQgPSByZXF1aXJlKCdhdG9tLWhpZ2hsaWdodCcpXG5pbXBvcnQgcGFuZG9jSGVscGVyID0gcmVxdWlyZSgnLi9wYW5kb2MtaGVscGVyJylcbmltcG9ydCBtYXJrZG93bkl0ID0gcmVxdWlyZSgnLi9tYXJrZG93bi1pdC1oZWxwZXInKSAvLyBEZWZlciB1bnRpbCB1c2VkXG5pbXBvcnQgeyBzY29wZUZvckZlbmNlTmFtZSB9IGZyb20gJy4vZXh0ZW5zaW9uLWhlbHBlcidcbmltcG9ydCBpbWFnZVdhdGNoZXIgPSByZXF1aXJlKCcuL2ltYWdlLXdhdGNoLWhlbHBlcicpXG5pbXBvcnQgeyBHcmFtbWFyLCBDb25maWdWYWx1ZXMgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHsgaXNGaWxlU3luYywgYXRvbUNvbmZpZyB9IGZyb20gJy4vdXRpbCdcbmltcG9ydCB7IGdldE1lZGlhIH0gZnJvbSAnLi91dGlsLWNvbW1vbidcblxuY29uc3QgeyByZXNvdXJjZVBhdGggfSA9IGF0b20uZ2V0TG9hZFNldHRpbmdzKClcbmNvbnN0IHBhY2thZ2VQYXRoID0gcGF0aC5kaXJuYW1lKF9fZGlybmFtZSlcblxuZXhwb3J0IHR5cGUgUmVuZGVyTW9kZSA9ICdub3JtYWwnIHwgJ2NvcHknIHwgJ3NhdmUnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW5kZXIoXG4gIHRleHQ6IHN0cmluZyxcbiAgZmlsZVBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgZ3JhbW1hcjogR3JhbW1hciB8IHVuZGVmaW5lZCxcbiAgcmVuZGVyTGFUZVg6IGJvb2xlYW4sXG4gIG1vZGU6IFJlbmRlck1vZGUsXG4gIHNhdmVQYXRoPzogc3RyaW5nLFxuKTogUHJvbWlzZTxIVE1MRG9jdW1lbnQ+IHtcbiAgLy8gUmVtb3ZlIHRoZSA8IWRvY3R5cGU+IHNpbmNlIG90aGVyd2lzZSBtYXJrZWQgd2lsbCBlc2NhcGUgaXRcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NoamovbWFya2VkL2lzc3Vlcy8zNTRcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXlxccyo8IWRvY3R5cGUoXFxzKy4qKT8+XFxzKi9pLCAnJylcblxuICBsZXQgaHRtbFxuICBsZXQgZXJyb3JcbiAgaWYgKGF0b21Db25maWcoKS5yZW5kZXJlciA9PT0gJ3BhbmRvYycpIHtcbiAgICB0cnkge1xuICAgICAgaHRtbCA9IGF3YWl0IHBhbmRvY0hlbHBlci5yZW5kZXJQYW5kb2ModGV4dCwgZmlsZVBhdGgsIHJlbmRlckxhVGVYKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc3QgZSA9IGVyciBhcyBFcnJvciAmIHsgaHRtbD86IHN0cmluZyB9XG4gICAgICBpZiAoZS5odG1sID09PSB1bmRlZmluZWQpIHRocm93IGVcbiAgICAgIGVycm9yID0gZS5tZXNzYWdlIGFzIHN0cmluZ1xuICAgICAgaHRtbCA9IGUuaHRtbCBhcyBzdHJpbmdcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaHRtbCA9IG1hcmtkb3duSXQucmVuZGVyKHRleHQsIHJlbmRlckxhVGVYKVxuICB9XG4gIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKVxuICBjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGh0bWwsICd0ZXh0L2h0bWwnKVxuICBzYW5pdGl6ZShkb2MpXG4gIGlmIChtb2RlID09PSAnbm9ybWFsJykge1xuICAgIGF3YWl0IHJlc29sdmVJbWFnZVBhdGhzKGRvYywgZmlsZVBhdGgsIHtcbiAgICAgIHZlcnNpb246IHRydWUsXG4gICAgICByZWxhdGl2aXplOiBmYWxzZSxcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIGxldCBiZWhhdmlvdXI6IENvbmZpZ1ZhbHVlc1snbWFya2Rvd24tcHJldmlldy1wbHVzLnNhdmVDb25maWcubWVkaWFPblNhdmVBc0hUTUxCZWhhdmlvdXInXVxuICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgY2FzZSAnc2F2ZSc6XG4gICAgICAgIGJlaGF2aW91ciA9IGF0b21Db25maWcoKS5zYXZlQ29uZmlnLm1lZGlhT25TYXZlQXNIVE1MQmVoYXZpb3VyXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdjb3B5JzpcbiAgICAgICAgYmVoYXZpb3VyID0gYXRvbUNvbmZpZygpLnNhdmVDb25maWcubWVkaWFPbkNvcHlBc0hUTUxCZWhhdmlvdXJcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IGludmFsaWRNb2RlKG1vZGUpXG4gICAgfVxuICAgIGF3YWl0IGhhbmRsZUltYWdlcyh7IGRvYywgZmlsZVBhdGgsIHNhdmVQYXRoLCBiZWhhdmlvdXIgfSlcbiAgfVxuICBsZXQgZGVmYXVsdENvZGVMYW5ndWFnZTogc3RyaW5nID0gJ3RleHQnXG4gIC8vIERlZmF1bHQgY29kZSBibG9ja3MgdG8gYmUgY29mZmVlIGluIExpdGVyYXRlIENvZmZlZVNjcmlwdCBmaWxlc1xuICBpZiAoKGdyYW1tYXIgJiYgZ3JhbW1hci5zY29wZU5hbWUpID09PSAnc291cmNlLmxpdGNvZmZlZScpIHtcbiAgICBkZWZhdWx0Q29kZUxhbmd1YWdlID0gJ2NvZmZlZSdcbiAgfVxuICBpZiAoXG4gICAgIShcbiAgICAgIGF0b21Db25maWcoKS5yZW5kZXJlciA9PT0gJ3BhbmRvYycgJiZcbiAgICAgIGF0b21Db25maWcoKS5wYW5kb2NDb25maWcudXNlTmF0aXZlUGFuZG9jQ29kZVN0eWxlc1xuICAgIClcbiAgKSB7XG4gICAgaGlnaGxpZ2h0Q29kZUJsb2Nrcyhkb2MsIGRlZmF1bHRDb2RlTGFuZ3VhZ2UsIG1vZGUgIT09ICdub3JtYWwnKVxuICB9XG4gIGlmIChlcnJvcikge1xuICAgIGNvbnN0IGVycmQgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBjb25zdCBtc2dlbCA9IGRvYy5jcmVhdGVFbGVtZW50KCdjb2RlJylcbiAgICBtc2dlbC5pbm5lclRleHQgPSBlcnJvclxuICAgIGVycmQuaW5uZXJIVE1MID0gYDxoMT5QYW5kb2MgRXJyb3I6PC9oMT4ke21zZ2VsLm91dGVySFRNTH08aHI+YFxuICAgIGRvYy5ib2R5Lmluc2VydEJlZm9yZShlcnJkLCBkb2MuYm9keS5maXJzdEVsZW1lbnRDaGlsZClcbiAgfVxuICByZXR1cm4gZG9jXG59XG5cbmZ1bmN0aW9uIGludmFsaWRNb2RlKG1vZGU6IG5ldmVyKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoYEludmFsaWQgcmVuZGVyIG1vZGUgJHttb2RlfWApXG59XG5cbmZ1bmN0aW9uIHNhbml0aXplKGRvYzogSFRNTERvY3VtZW50KSB7XG4gIC8vIERvIG5vdCByZW1vdmUgTWF0aEpheCBzY3JpcHQgZGVsaW1pdGVkIGJsb2Nrc1xuICBkb2MucXVlcnlTZWxlY3RvckFsbChcInNjcmlwdDpub3QoW3R5cGVePSdtYXRoL3RleCddKVwiKS5mb3JFYWNoKChlbGVtKSA9PiB7XG4gICAgZWxlbS5yZW1vdmUoKVxuICB9KVxuICBjb25zdCBhdHRyaWJ1dGVzVG9SZW1vdmUgPSBbXG4gICAgJ29uYWJvcnQnLFxuICAgICdvbmJsdXInLFxuICAgICdvbmNoYW5nZScsXG4gICAgJ29uY2xpY2snLFxuICAgICdvbmRiY2xpY2snLFxuICAgICdvbmVycm9yJyxcbiAgICAnb25mb2N1cycsXG4gICAgJ29ua2V5ZG93bicsXG4gICAgJ29ua2V5cHJlc3MnLFxuICAgICdvbmtleXVwJyxcbiAgICAnb25sb2FkJyxcbiAgICAnb25tb3VzZWRvd24nLFxuICAgICdvbm1vdXNlbW92ZScsXG4gICAgJ29ubW91c2VvdmVyJyxcbiAgICAnb25tb3VzZW91dCcsXG4gICAgJ29ubW91c2V1cCcsXG4gICAgJ29ucmVzZXQnLFxuICAgICdvbnJlc2l6ZScsXG4gICAgJ29uc2Nyb2xsJyxcbiAgICAnb25zZWxlY3QnLFxuICAgICdvbnN1Ym1pdCcsXG4gICAgJ29udW5sb2FkJyxcbiAgXVxuICBkb2MucXVlcnlTZWxlY3RvckFsbCgnKicpLmZvckVhY2goKGVsZW0pID0+XG4gICAgYXR0cmlidXRlc1RvUmVtb3ZlLm1hcCgoYXR0cmlidXRlKSA9PiB7XG4gICAgICBlbGVtLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpXG4gICAgfSksXG4gIClcbn1cblxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlSW1hZ2VzKG9wdHM6IHtcbiAgYmVoYXZpb3VyOiAncmVsYXRpdml6ZWQnIHwgJ2Fic29sdXRpemVkJyB8ICd1bnRvdWNoZWQnXG4gIGRvYzogSFRNTERvY3VtZW50XG4gIGZpbGVQYXRoPzogc3RyaW5nXG4gIHNhdmVQYXRoPzogc3RyaW5nXG59KSB7XG4gIGNvbnN0IHJlbGF0aXZpemUgPSBvcHRzLmJlaGF2aW91ciA9PT0gJ3JlbGF0aXZpemVkJ1xuICBzd2l0Y2ggKG9wdHMuYmVoYXZpb3VyKSB7XG4gICAgY2FzZSAncmVsYXRpdml6ZWQnOlxuICAgIGNhc2UgJ2Fic29sdXRpemVkJzpcbiAgICAgIGF3YWl0IHJlc29sdmVJbWFnZVBhdGhzKFxuICAgICAgICBvcHRzLmRvYyxcbiAgICAgICAgb3B0cy5maWxlUGF0aCxcbiAgICAgICAge1xuICAgICAgICAgIHZlcnNpb246IGZhbHNlLFxuICAgICAgICAgIHJlbGF0aXZpemUsXG4gICAgICAgIH0sXG4gICAgICAgIG9wdHMuc2F2ZVBhdGgsXG4gICAgICApXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3VudG91Y2hlZCc6XG4gICAgLyogbm9vcCAqL1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVJbWFnZVBhdGhzKFxuICBkb2M6IEhUTUxEb2N1bWVudCxcbiAgZmlsZVBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgb3B0aW9uczogUmVjb3JkPCd2ZXJzaW9uJyB8ICdyZWxhdGl2aXplJywgYm9vbGVhbj4sXG4gIHNhdmVQYXRoPzogc3RyaW5nLFxuKSB7XG4gIGNvbnN0IFtyb290RGlyZWN0b3J5XSA9IGF0b20ucHJvamVjdC5yZWxhdGl2aXplUGF0aChmaWxlUGF0aCB8fCAnJylcbiAgY29uc3QgbWVkaWEgPSBnZXRNZWRpYShkb2MpXG4gIGF3YWl0IFByb21pc2UuYWxsKFxuICAgIEFycmF5LmZyb20obWVkaWEpLm1hcChhc3luYyBmdW5jdGlvbihpbWcpIHtcbiAgICAgIGxldCBzcmMgPSBpbWcuZ2V0QXR0cmlidXRlKCdzcmMnKVxuICAgICAgaWYgKHNyYykge1xuICAgICAgICBpZiAoYXRvbUNvbmZpZygpLnJlbmRlcmVyICE9PSAncGFuZG9jJykge1xuICAgICAgICAgIHNyYyA9IGRlY29kZVVSSShzcmMpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3JjLm1hdGNoKC9eKGh0dHBzP3xhdG9tfGRhdGEpOi8pKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb2Nlc3MucmVzb3VyY2VzUGF0aCAmJiBzcmMuc3RhcnRzV2l0aChwcm9jZXNzLnJlc291cmNlc1BhdGgpKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNyYy5zdGFydHNXaXRoKHJlc291cmNlUGF0aCkpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3JjLnN0YXJ0c1dpdGgocGFja2FnZVBhdGgpKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3JjWzBdID09PSAnLycpIHtcbiAgICAgICAgICBpZiAoIWlzRmlsZVN5bmMoc3JjKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgaWYgKHJvb3REaXJlY3RvcnkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBwYXRoLmpvaW4ocm9vdERpcmVjdG9yeSwgc3JjLnN1YnN0cmluZygxKSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAvLyBub29wXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGZpbGVQYXRoKSB7XG4gICAgICAgICAgc3JjID0gcGF0aC5yZXNvbHZlKHBhdGguZGlybmFtZShmaWxlUGF0aCksIHNyYylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBvcHRpb25zLnJlbGF0aXZpemUgJiZcbiAgICAgICAgICAoZmlsZVBhdGggIT09IHVuZGVmaW5lZCB8fCBzYXZlUGF0aCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBmcCA9IHNhdmVQYXRoICE9PSB1bmRlZmluZWQgPyBzYXZlUGF0aCA6IGZpbGVQYXRoIVxuICAgICAgICAgIHNyYyA9IHBhdGgucmVsYXRpdmUocGF0aC5kaXJuYW1lKGZwKSwgc3JjKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXNlIG1vc3QgcmVjZW50IHZlcnNpb24gb2YgaW1hZ2VcbiAgICAgICAgaWYgKG9wdGlvbnMudmVyc2lvbikge1xuICAgICAgICAgIGNvbnN0IHYgPSBhd2FpdCBpbWFnZVdhdGNoZXIuZ2V0VmVyc2lvbihzcmMsIGZpbGVQYXRoKVxuICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICBzcmMgPSBgJHtzcmN9P3Y9JHt2fWBcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpbWcuc3JjID0gc3JjXG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9KSxcbiAgKVxufVxuXG5mdW5jdGlvbiBoaWdobGlnaHRDb2RlQmxvY2tzKFxuICBkb21GcmFnbWVudDogRG9jdW1lbnQsXG4gIGRlZmF1bHRMYW5ndWFnZTogc3RyaW5nLFxuICBjb3B5SFRNTDogYm9vbGVhbixcbikge1xuICBjb25zdCBmb250RmFtaWx5ID0gYXRvbS5jb25maWcuZ2V0KCdlZGl0b3IuZm9udEZhbWlseScpXG4gIGlmIChmb250RmFtaWx5KSB7XG4gICAgZm9yIChjb25zdCBjb2RlRWxlbWVudCBvZiBBcnJheS5mcm9tKFxuICAgICAgZG9tRnJhZ21lbnQucXVlcnlTZWxlY3RvckFsbCgnY29kZScpLFxuICAgICkpIHtcbiAgICAgIGNvZGVFbGVtZW50LnN0eWxlLmZvbnRGYW1pbHkgPSBmb250RmFtaWx5XG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCBwcmVFbGVtZW50IG9mIEFycmF5LmZyb20oZG9tRnJhZ21lbnQucXVlcnlTZWxlY3RvckFsbCgncHJlJykpKSB7XG4gICAgY29uc3QgY29kZUJsb2NrID1cbiAgICAgIHByZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQgIT09IG51bGxcbiAgICAgICAgPyBwcmVFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkXG4gICAgICAgIDogcHJlRWxlbWVudFxuICAgIGNvbnN0IGNiQ2xhc3MgPSBjb2RlQmxvY2suY2xhc3NOYW1lXG4gICAgY29uc3QgZmVuY2VOYW1lID0gY2JDbGFzc1xuICAgICAgPyBjYkNsYXNzLnJlcGxhY2UoL14obGFuZy18c291cmNlQ29kZSApLywgJycpXG4gICAgICA6IGRlZmF1bHRMYW5ndWFnZVxuXG4gICAgY29uc3QgYWRkQ2xhc3MgPSBjb3B5SFRNTCA/ICdlZGl0b3ItY29sb3JzICcgOiAnJ1xuICAgIHByZUVsZW1lbnQub3V0ZXJIVE1MID0gaGlnaGxpZ2h0KHtcbiAgICAgIGZpbGVDb250ZW50czogY29kZUJsb2NrLnRleHRDb250ZW50IS5yZXBsYWNlKC9cXG4kLywgJycpLFxuICAgICAgc2NvcGVOYW1lOiBzY29wZUZvckZlbmNlTmFtZShmZW5jZU5hbWUpLFxuICAgICAgbmJzcDogZmFsc2UsXG4gICAgICBsaW5lRGl2czogY29weUhUTUwgPyBmYWxzZSA6IHRydWUsXG4gICAgICBlZGl0b3JEaXY6IHRydWUsXG4gICAgICBlZGl0b3JEaXZUYWc6IGNvcHlIVE1MID8gJ3ByZScgOiAnYXRvbS10ZXh0LWVkaXRvcicsXG4gICAgICAvLyBUaGUgYGVkaXRvcmAgY2xhc3MgbWVzc2VzIHRoaW5ncyB1cCBhcyBgLmVkaXRvcmAgaGFzIGFic29sdXRlbHkgcG9zaXRpb25lZCBsaW5lc1xuICAgICAgZWRpdG9yRGl2Q2xhc3M6IGZlbmNlTmFtZSA/IGAke2FkZENsYXNzfWxhbmctJHtmZW5jZU5hbWV9YCA6IGFkZENsYXNzLFxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gZG9tRnJhZ21lbnRcbn1cbiJdfQ==