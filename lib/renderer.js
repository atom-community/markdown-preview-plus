"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const pandocHelper = require("./pandoc-helper");
const markdownIt = require("./markdown-it-helper");
const extension_helper_1 = require("./extension-helper");
const atom_1 = require("atom");
const util_1 = require("./util");
const util_common_1 = require("./util-common");
const { resourcePath } = atom.getLoadSettings();
const packagePath = path.dirname(__dirname);
async function render(options) {
    const text = options.text.replace(/^\s*<!doctype(\s+.*)?>\s*/i, '');
    let html;
    let error;
    if (util_1.atomConfig().renderer === 'pandoc') {
        try {
            html = await pandocHelper.renderPandoc(text, options.filePath, options.renderLaTeX);
        }
        catch (err) {
            const e = err;
            if (e.html === undefined)
                throw e;
            error = e.message;
            html = e.html;
        }
    }
    else {
        html = markdownIt.render(text, options.renderLaTeX);
    }
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, 'text/html');
    sanitize(doc);
    if (options.mode === 'normal') {
        options.imageWatcher.clear();
        resolveImagePaths(doc, options.filePath, false, undefined, options.imageWatcher);
    }
    else {
        switch (options.mode) {
            case 'save':
                handleImages({
                    doc,
                    filePath: options.filePath,
                    savePath: options.savePath,
                    behaviour: util_1.atomConfig().saveConfig.mediaOnSaveAsHTMLBehaviour,
                });
                break;
            case 'copy':
                handleImages({
                    doc,
                    filePath: options.filePath,
                    behaviour: util_1.atomConfig().saveConfig.mediaOnCopyAsHTMLBehaviour,
                });
                break;
            default:
                throw invalidMode(options.mode);
        }
    }
    let defaultCodeLanguage = 'text';
    if ((options.grammar && options.grammar.scopeName) === 'source.litcoffee') {
        defaultCodeLanguage = 'coffee';
    }
    if (!(util_1.atomConfig().renderer === 'pandoc' &&
        util_1.atomConfig().pandocConfig.useNativePandocCodeStyles)) {
        await highlightCodeBlocks(doc, defaultCodeLanguage);
    }
    if (error) {
        const errd = doc.createElement('div');
        const msgel = doc.createElement('code');
        msgel.innerText = error;
        errd.innerHTML = `<h1>Pandoc Error:</h1>${msgel.outerHTML}<hr>`;
        doc.body.insertBefore(errd, doc.body.firstElementChild);
    }
    return doc;
}
exports.render = render;
function invalidMode(mode) {
    return new Error(`Invalid render mode ${JSON.stringify(mode)}`);
}
function sanitize(doc) {
    doc.querySelectorAll("script:not([type^='math/tex'])").forEach((elem) => {
        elem.remove();
    });
    const attributesToRemove = [
        'onabort',
        'onblur',
        'onchange',
        'onclick',
        'ondbclick',
        'onerror',
        'onfocus',
        'onkeydown',
        'onkeypress',
        'onkeyup',
        'onload',
        'onmousedown',
        'onmousemove',
        'onmouseover',
        'onmouseout',
        'onmouseup',
        'onreset',
        'onresize',
        'onscroll',
        'onselect',
        'onsubmit',
        'onunload',
    ];
    doc.querySelectorAll('*').forEach((elem) => attributesToRemove.map((attribute) => {
        elem.removeAttribute(attribute);
    }));
}
function handleImages(opts) {
    const relativize = opts.behaviour === 'relativized';
    switch (opts.behaviour) {
        case 'relativized':
        case 'absolutized':
            resolveImagePaths(opts.doc, opts.filePath, relativize, opts.savePath);
            break;
        case 'untouched':
    }
}
function resolveImagePaths(doc, filePath, relativize, savePath, imageWatcher) {
    const [rootDirectory] = atom.project.relativizePath(filePath || '');
    const media = util_common_1.getMedia(doc);
    Array.from(media).map(function (img) {
        let attrName;
        if (img.tagName === 'LINK')
            attrName = 'href';
        else
            attrName = 'src';
        let src = img.getAttribute(attrName);
        if (src) {
            if (util_1.atomConfig().renderer !== 'pandoc') {
                src = decodeURI(src);
            }
            if (src.match(/^(https?|atom|data):/)) {
                return;
            }
            if (process.resourcesPath && src.startsWith(process.resourcesPath)) {
                return;
            }
            if (src.startsWith(resourcePath)) {
                return;
            }
            if (src.startsWith(packagePath)) {
                return;
            }
            if (src[0] === '/') {
                if (!util_1.isFileSync(src)) {
                    try {
                        if (rootDirectory !== null) {
                            src = path.join(rootDirectory, src.substring(1));
                        }
                    }
                    catch (e) {
                    }
                }
            }
            else if (filePath) {
                src = path.resolve(path.dirname(filePath), src);
            }
            if (relativize && (filePath !== undefined || savePath !== undefined)) {
                const fp = savePath !== undefined ? savePath : filePath;
                src = path.relative(path.dirname(fp), src);
            }
            if (imageWatcher) {
                const v = imageWatcher.watch(src);
                if (v !== undefined)
                    src = `${src}?v=${v}`;
            }
            img[attrName] = src;
        }
    });
}
async function highlightCodeBlocks(domFragment, defaultLanguage) {
    const fontFamily = atom.config.get('editor.fontFamily');
    if (fontFamily) {
        for (const codeElement of Array.from(domFragment.querySelectorAll('code'))) {
            codeElement.style.fontFamily = fontFamily;
        }
    }
    await Promise.all(Array.from(domFragment.querySelectorAll('pre')).map(async (preElement) => {
        const codeBlock = preElement.firstElementChild !== null
            ? preElement.firstElementChild
            : preElement;
        const cbClass = codeBlock.className || preElement.className;
        const fenceName = cbClass
            ? cbClass.replace(/^(lang-|sourceCode )/, '')
            : defaultLanguage;
        const ctw = util_1.atomConfig().codeTabWidth;
        const ed = new atom_1.TextEditor({
            readonly: true,
            keyboardInputEnabled: false,
            showInvisibles: false,
            tabLength: ctw === 0 ? atom.config.get('editor.tabLength') : ctw,
        });
        const el = atom.views.getView(ed);
        try {
            el.setUpdatedSynchronously(true);
            el.style.pointerEvents = 'none';
            el.style.position = 'absolute';
            el.style.width = '0px';
            el.style.height = '1px';
            atom.views.getView(atom.workspace).appendChild(el);
            atom.grammars.assignLanguageMode(ed.getBuffer(), extension_helper_1.scopeForFenceName(fenceName));
            ed.setText(codeBlock.textContent.replace(/\r?\n$/, ''));
            await editorTokenized(ed);
            const html = Array.from(el.querySelectorAll('.line:not(.dummy)'));
            preElement.classList.add('editor-colors');
            preElement.innerHTML = html.map((x) => x.innerHTML).join('\n');
            if (fenceName)
                preElement.classList.add(`lang-${fenceName}`);
        }
        finally {
            el.remove();
        }
    }));
    return domFragment;
}
async function editorTokenized(editor) {
    return new Promise((resolve) => {
        if (editor.getBuffer().getLanguageMode().fullyTokenized) {
            resolve();
        }
        else {
            const disp = editor.onDidTokenize(() => {
                disp.dispose();
                resolve();
            });
        }
    });
}
//# sourceMappingURL=data:application/json;base64,