"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const atom_1 = require("atom");
const util_1 = require("../util");
class WebviewHandler {
    constructor(init) {
        this.emitter = new atom_1.Emitter();
        this.disposables = new atom_1.CompositeDisposable();
        this.destroyed = false;
        this.zoomLevel = 0;
        this.replyCallbacks = new Map();
        this.replyCallbackId = 0;
        this.element = document.createElement('webview');
        this.element.classList.add('markdown-preview-plus', 'native-key-bindings');
        this.element.disablewebsecurity = 'true';
        this.element.nodeintegration = 'true';
        this.element.src = `file:///${__dirname}/../../client/template.html`;
        this.element.style.width = '100%';
        this.element.style.height = '100%';
        this.element.addEventListener('ipc-message', (e) => {
            switch (e.channel) {
                case 'zoom-in':
                    this.zoomIn();
                    break;
                case 'zoom-out':
                    this.zoomOut();
                    break;
                case 'did-scroll-preview':
                    this.emitter.emit('did-scroll-preview', e.args[0]);
                    break;
                case 'request-reply': {
                    const { id, request, result } = e.args[0];
                    const cb = this.replyCallbacks.get(id);
                    if (cb && request === cb.request) {
                        const callback = cb.callback;
                        callback(result);
                    }
                    break;
                }
            }
        });
        this.element.addEventListener('will-navigate', async (e) => {
            const { shell } = await Promise.resolve().then(() => require('electron'));
            const fileUriToPath = await Promise.resolve().then(() => require('file-uri-to-path'));
            if (e.url.startsWith('file://')) {
                util_1.handlePromise(atom.workspace.open(fileUriToPath(e.url)));
            }
            else {
                shell.openExternal(e.url);
            }
        });
        this.disposables.add(atom.styles.onDidAddStyleElement(() => {
            this.updateStyles();
        }), atom.styles.onDidRemoveStyleElement(() => {
            this.updateStyles();
        }), atom.styles.onDidUpdateStyleElement(() => {
            this.updateStyles();
        }));
        const onload = () => {
            if (this.destroyed)
                return;
            this.element.setZoomLevel(this.zoomLevel);
            this.updateStyles();
            init();
        };
        this.element.addEventListener('dom-ready', onload);
    }
    async runJS(js) {
        return new Promise((resolve) => this.element.executeJavaScript(js, false, resolve));
    }
    destroy() {
        if (this.destroyed)
            return;
        this.destroyed = true;
        this.disposables.dispose();
        this.element.remove();
    }
    async update(html, renderLaTeX, mjrenderer) {
        if (this.destroyed)
            return undefined;
        return this.runRequest('update-preview', {
            html,
            renderLaTeX,
            mjrenderer,
        });
    }
    setSourceMap(map) {
        this.element.send('set-source-map', { map });
    }
    setUseGitHubStyle(value) {
        this.element.send('use-github-style', { value });
    }
    setBasePath(path) {
        this.element.send('set-base-path', { path });
    }
    init(atomHome, numberEqns) {
        this.element.send('init', { atomHome, numberEqns });
    }
    updateImages(oldSource, version) {
        this.element.send('update-images', {
            oldsrc: oldSource,
            v: version,
        });
    }
    saveToPDF(filePath) {
        this.element.printToPDF({}, (error, data) => {
            if (error) {
                atom.notifications.addError('Failed saving to PDF', {
                    description: error.toString(),
                    dismissable: true,
                    stack: error.stack,
                });
                return;
            }
            fs.writeFileSync(filePath, data);
        });
    }
    sync(line) {
        this.element.send('sync', { line });
    }
    async syncSource() {
        return this.runRequest('sync-source', {});
    }
    scrollSync(firstLine, lastLine) {
        this.element.send('scroll-sync', { firstLine, lastLine });
    }
    zoomIn() {
        this.zoomLevel += 0.1;
        this.element.setZoomLevel(this.zoomLevel);
    }
    zoomOut() {
        this.zoomLevel -= 0.1;
        this.element.setZoomLevel(this.zoomLevel);
    }
    resetZoom() {
        this.zoomLevel = 0;
        this.element.setZoomLevel(this.zoomLevel);
    }
    print() {
        this.element.print();
    }
    openDevTools() {
        this.element.openDevTools();
    }
    async reload() {
        await this.runRequest('reload', {});
        this.element.reload();
    }
    error(msg) {
        this.element.send('error', { msg });
    }
    async getTeXConfig() {
        return this.runRequest('get-tex-config', {});
    }
    async runRequest(request, args) {
        const id = this.replyCallbackId++;
        return new Promise((resolve) => {
            this.replyCallbacks.set(id, {
                request: request,
                callback: (result) => {
                    this.replyCallbacks.delete(id);
                    resolve(result);
                },
            });
            const newargs = Object.assign({ id }, args);
            this.element.send(request, newargs);
        });
    }
    updateStyles() {
        const styles = [];
        for (const se of atom.styles.getStyleElements()) {
            styles.push(se.innerHTML);
        }
        this.element.send('style', { styles });
    }
}
exports.WebviewHandler = WebviewHandler;
//# sourceMappingURL=data:application/json;base64,