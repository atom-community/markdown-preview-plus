"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const util = require("./util");
const markdown_preview_view_1 = require("./markdown-preview-view");
const util_1 = require("../util");
const markdown_preview_view_editor_remote_1 = require("./markdown-preview-view-editor-remote");
class MarkdownPreviewViewEditor extends markdown_preview_view_1.MarkdownPreviewView {
    constructor(editor) {
        super();
        this.editor = editor;
        this.syncPreviewHelper = async () => {
            const pos = this.editor.getCursorBufferPosition().row;
            this.syncPreview(pos);
        };
        this.handleEditorEvents();
    }
    static create(editor) {
        let mppv = MarkdownPreviewViewEditor.editorMap.get(editor);
        if (!mppv) {
            mppv = new MarkdownPreviewViewEditor(editor);
            MarkdownPreviewViewEditor.editorMap.set(editor, mppv);
        }
        return mppv;
    }
    static viewForEditor(editor) {
        return MarkdownPreviewViewEditor.editorMap.get(editor);
    }
    destroy() {
        super.destroy();
        MarkdownPreviewViewEditor.editorMap.delete(this.editor);
    }
    serialize() {
        return {
            deserializer: 'markdown-preview-plus/MarkdownPreviewView',
            editorId: this.editor && this.editor.id,
        };
    }
    getTitle() {
        return `${this.editor.getTitle()} Preview`;
    }
    getURI() {
        return `markdown-preview-plus://editor/${this.editor.id}`;
    }
    getPath() {
        return this.editor.getPath();
    }
    async getMarkdownSource() {
        return this.editor.getText();
    }
    getGrammar() {
        return this.editor.getGrammar();
    }
    didScrollPreview(min, max) {
        if (!this.shouldScrollSync('preview'))
            return;
        if (min === 0) {
            this.editor.scrollToBufferPosition([min, 0]);
        }
        else if (max >= this.editor.getLastBufferRow() - 1) {
            this.editor.scrollToBufferPosition([max, 0]);
        }
        else {
            const range = atom_1.Range.fromObject([[min, 0], [max, 0]]);
            this.editor.scrollToScreenRange(this.editor.screenRangeForBufferRange(range), { center: false });
        }
    }
    openNewWindow() {
        markdown_preview_view_editor_remote_1.MarkdownPreviewViewEditorRemote.open(this.editor);
        util.destroy(this);
    }
    openSource(initialLine) {
        if (initialLine !== undefined) {
            this.editor.setCursorBufferPosition([initialLine, 0]);
        }
        const pane = atom.workspace.paneForItem(this.editor);
        if (!pane)
            return;
        pane.activateItem(this.editor);
        pane.activate();
    }
    handleEditorEvents() {
        this.disposables.add(atom.workspace.onDidChangeActiveTextEditor((ed) => {
            if (util_1.atomConfig().previewConfig.activatePreviewWithEditor) {
                if (ed === this.editor) {
                    const pane = atom.workspace.paneForItem(this);
                    if (!pane)
                        return;
                    const edPane = atom.workspace.paneForItem(ed);
                    if (pane === edPane)
                        return;
                    pane.activateItem(this);
                }
            }
        }), this.editor.getBuffer().onDidStopChanging(() => {
            if (util_1.atomConfig().previewConfig.liveUpdate) {
                this.changeHandler();
            }
            if (util_1.atomConfig().syncConfig.syncPreviewOnChange) {
                util_1.handlePromise(this.syncPreviewHelper());
            }
        }), this.editor.onDidChangePath(() => {
            this.emitter.emit('did-change-title');
        }), this.editor.onDidDestroy(() => {
            if (util_1.atomConfig().previewConfig.closePreviewWithEditor) {
                util.destroy(this);
            }
        }), this.editor.getBuffer().onDidSave(() => {
            if (!util_1.atomConfig().previewConfig.liveUpdate) {
                this.changeHandler();
            }
        }), this.editor.getBuffer().onDidReload(() => {
            if (!util_1.atomConfig().previewConfig.liveUpdate) {
                this.changeHandler();
            }
        }), atom.views.getView(this.editor).onDidChangeScrollTop(() => {
            if (!this.shouldScrollSync('editor'))
                return;
            const [first, last] = this.editor.getVisibleRowRange();
            this.handler.scrollSync(this.editor.bufferRowForScreenRow(first), this.editor.bufferRowForScreenRow(last));
        }), atom.commands.add(atom.views.getView(this.editor), {
            'markdown-preview-plus:sync-preview': this.syncPreviewHelper,
        }));
    }
    shouldScrollSync(whatScrolled) {
        const config = util_1.atomConfig().syncConfig;
        if (config.syncEditorOnPreviewScroll && config.syncPreviewOnEditorScroll) {
            const item = whatScrolled === 'editor' ? this.editor : this;
            const pane = atom.workspace.paneForItem(item);
            return pane && pane.isActive();
        }
        else {
            return ((config.syncEditorOnPreviewScroll && whatScrolled === 'preview') ||
                (config.syncPreviewOnEditorScroll && whatScrolled === 'editor'));
        }
    }
}
MarkdownPreviewViewEditor.editorMap = new WeakMap();
exports.MarkdownPreviewViewEditor = MarkdownPreviewViewEditor;
//# sourceMappingURL=data:application/json;base64,