"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const electron_1 = require("electron");
const request_handler_1 = require("./request-handler");
const util_1 = require("../../util");
const should_scroll_sync_1 = require("./should-scroll-sync");
class RemoteEditorServer {
    constructor(editor) {
        this.editor = editor;
        this.disposables = new atom_1.CompositeDisposable();
        this.windowId = electron_1.remote.getCurrentWindow().id;
        this.destroyTimeoutLength = 60000;
        this.usageCounter = 0;
        this.eventHandlers = {
            scrollToBufferRange: ([min, max]) => {
                if (min === 0) {
                    this.editor.scrollToBufferPosition([min, 0]);
                }
                else if (max >= this.editor.getLastBufferRow() - 1) {
                    this.editor.scrollToBufferPosition([max, 0]);
                }
                else {
                    const range = atom_1.Range.fromObject([[min, 0], [max, 0]]);
                    this.editor.scrollToScreenRange(this.editor.screenRangeForBufferRange(range), {
                        center: false,
                    });
                }
            },
            destroy: () => {
                this.usageCounter -= 1;
                if (this.usageCounter <= 0) {
                    this.resetTimeout();
                    this.destroyTimeout = window.setTimeout(() => {
                        this.dispose();
                    }, this.destroyTimeoutLength);
                }
            },
            init: () => {
                this.usageCounter += 1;
                this.resetTimeout();
                return {
                    path: this.editor.getPath(),
                    title: this.editor.getTitle(),
                    grammar: this.editor.getGrammar().scopeName,
                    text: this.editor.getText(),
                };
            },
            openSource: (row) => {
                if (row !== undefined) {
                    this.editor.setCursorBufferPosition([row, 0]);
                }
                electron_1.remote.getCurrentWindow().focus();
                const pane = atom.workspace.paneForItem(this.editor);
                if (!pane)
                    return;
                pane.activateItem(this.editor);
                pane.activate();
            },
        };
        this.disposables.add(new request_handler_1.RequestHandler(this.windowId, editor.id, this.eventHandlers));
        this.handleEditorEvents();
    }
    static create(editor) {
        const res = RemoteEditorServer.editorMap.get(editor);
        if (res)
            return res;
        const newRes = new RemoteEditorServer(editor);
        RemoteEditorServer.editorMap.set(editor, newRes);
        return newRes;
    }
    dispose() {
        RemoteEditorServer.editorMap.delete(this.editor);
        this.disposables.dispose();
    }
    resetTimeout() {
        if (this.destroyTimeout !== undefined) {
            window.clearTimeout(this.destroyTimeout);
            this.destroyTimeout = undefined;
        }
    }
    handleEditorEvents() {
        this.disposables.add(this.editor.getBuffer().onDidStopChanging(() => {
            if (util_1.atomConfig().previewConfig.liveUpdate) {
                this.emit('changeText', this.editor.getText());
            }
            if (util_1.atomConfig().syncConfig.syncPreviewOnChange) {
                this.emit('syncPreview', this.editor.getCursorBufferPosition().row);
            }
        }), this.editor.onDidChangePath(() => {
            this.emit('changePath', {
                path: this.editor.getPath(),
                title: this.editor.getTitle(),
            });
        }), this.editor.onDidChangeGrammar((grammar) => {
            this.emit('changeGrammar', grammar.scopeName);
        }), this.editor.onDidDestroy(() => {
            this.dispose();
            if (util_1.atomConfig().previewConfig.closePreviewWithEditor) {
                this.emit('destroy', undefined);
            }
        }), this.editor.getBuffer().onDidSave(() => {
            if (!util_1.atomConfig().previewConfig.liveUpdate) {
                this.emit('changeText', this.editor.getText());
            }
        }), this.editor.getBuffer().onDidReload(() => {
            if (!util_1.atomConfig().previewConfig.liveUpdate) {
                this.emit('changeText', this.editor.getText());
            }
        }), atom.views.getView(this.editor).onDidChangeScrollTop(() => {
            if (!should_scroll_sync_1.shouldScrollSync('editor'))
                return;
            const [first, last] = this.editor.getVisibleRowRange();
            const firstLine = this.editor.bufferRowForScreenRow(first);
            const lastLine = this.editor.bufferRowForScreenRow(last);
            this.emit('scrollSync', [firstLine, lastLine]);
        }), atom.commands.add(atom.views.getView(this.editor), {
            'markdown-preview-plus:sync-preview': () => {
                this.emit('syncPreview', this.editor.getCursorBufferPosition().row);
            },
        }));
    }
    emit(event, arg) {
        electron_1.remote.ipcMain.emit('markdown-preview-plus:editor-event', {
            editorId: this.editor.id,
            windowId: this.windowId,
            event,
            arg,
        });
    }
}
RemoteEditorServer.editorMap = new WeakMap();
exports.RemoteEditorServer = RemoteEditorServer;
//# sourceMappingURL=data:application/json;base64,