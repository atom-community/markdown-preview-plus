"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
class IPCCaller {
    constructor(windowId, editorId) {
        this.windowId = windowId;
        this.editorId = editorId;
        this.ipcIdx = 0;
        this.myWindowId = electron_1.remote.getCurrentWindow().id;
    }
    async scrollToBufferRange(arg) {
        return this.ipc('scrollToBufferRange', arg);
    }
    async destroy() {
        return this.ipc('destroy', undefined);
    }
    async init() {
        return this.ipc('init', undefined);
    }
    async openSource(arg) {
        return this.ipc('openSource', arg);
    }
    dispose() {
    }
    async ipc(cmd, args) {
        return new Promise((resolve, reject) => {
            const idx = this.ipcIdx++;
            const handler = (e) => {
                if (e.forWindowId === this.myWindowId &&
                    e.windowId === this.windowId &&
                    e.editorId === this.editorId &&
                    e.idx === idx) {
                    electron_1.remote.ipcMain.removeListener('markdown-preview-plus:editor-reply', handler);
                    resolve(e.reply);
                }
            };
            const res = electron_1.remote.ipcMain.emit('markdown-preview-plus:editor-request', {
                windowId: this.windowId,
                editorId: this.editorId,
                forWindowId: this.myWindowId,
                idx,
                cmd,
                args,
            });
            if (!res) {
                reject(new Error('Nobody is listening for editor requests'));
                return;
            }
            electron_1.remote.ipcMain.on('markdown-preview-plus:editor-reply', handler);
        });
    }
}
exports.IPCCaller = IPCCaller;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXBjLWNhbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYXJrZG93bi1wcmV2aWV3LXZpZXcvaXBjL2lwYy1jYWxsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx1Q0FBaUM7QUFRakMsTUFBYSxTQUFTO0lBR3BCLFlBQW9CLFFBQWdCLEVBQVUsUUFBZ0I7UUFBMUMsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVE7UUFGdEQsV0FBTSxHQUFHLENBQUMsQ0FBQTtRQUNWLGVBQVUsR0FBRyxpQkFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUMsRUFBRSxDQUFBO0lBQ2dCLENBQUM7SUFDM0QsS0FBSyxDQUFDLG1CQUFtQixDQUFDLEdBQXFCO1FBQ3BELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUM3QyxDQUFDO0lBQ00sS0FBSyxDQUFDLE9BQU87UUFDbEIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUN2QyxDQUFDO0lBQ00sS0FBSyxDQUFDLElBQUk7UUFDZixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQ3BDLENBQUM7SUFDTSxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQVk7UUFDbEMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUNwQyxDQUFDO0lBQ00sT0FBTztJQUVkLENBQUM7SUFDTyxLQUFLLENBQUMsR0FBRyxDQUNmLEdBQU0sRUFDTixJQUFvQjtRQUVwQixPQUFPLElBQUksT0FBTyxDQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQzFDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtZQUN6QixNQUFNLE9BQU8sR0FBRyxDQUFDLENBTWhCLEVBQUUsRUFBRTtnQkFDSCxJQUNFLENBQUMsQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDLFVBQVU7b0JBQ2pDLENBQUMsQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFFBQVE7b0JBQzVCLENBQUMsQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFFBQVE7b0JBQzVCLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxFQUNiO29CQUNBLGlCQUFNLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FDM0Isb0NBQW9DLEVBQ3BDLE9BQU8sQ0FDUixDQUFBO29CQUNELE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUE7aUJBQ2pCO1lBQ0gsQ0FBQyxDQUFBO1lBQ0QsTUFBTSxHQUFHLEdBQUcsaUJBQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLHNDQUFzQyxFQUFFO2dCQUN0RSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7Z0JBQ3ZCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtnQkFDdkIsV0FBVyxFQUFFLElBQUksQ0FBQyxVQUFVO2dCQUM1QixHQUFHO2dCQUNILEdBQUc7Z0JBQ0gsSUFBSTthQUNMLENBQUMsQ0FBQTtZQUNGLElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ1IsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUMsQ0FBQTtnQkFDNUQsT0FBTTthQUNQO1lBQ0QsaUJBQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLG9DQUFvQyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ2xFLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGO0FBNURELDhCQTREQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElQQ0NtZCwgQXJnIH0gZnJvbSAnLi9yZXF1ZXN0LWhhbmRsZXInXHJcbmltcG9ydCB7IHJlbW90ZSB9IGZyb20gJ2VsZWN0cm9uJ1xyXG5cclxuZXhwb3J0IHR5cGUgSVBDQ21kUHJvbWlzZSA9IHtcclxuICBbSyBpbiBrZXlvZiBJUENDbWRdOiBJUENDbWRbS10gZXh0ZW5kcyAoYXJnOiBpbmZlciBBKSA9PiBpbmZlciBSXHJcbiAgICA/IChhcmc6IEEpID0+IFByb21pc2U8Uj5cclxuICAgIDogbmV2ZXJcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIElQQ0NhbGxlciBpbXBsZW1lbnRzIElQQ0NtZFByb21pc2Uge1xyXG4gIHByaXZhdGUgaXBjSWR4ID0gMFxyXG4gIHByaXZhdGUgbXlXaW5kb3dJZCA9IHJlbW90ZS5nZXRDdXJyZW50V2luZG93KCkuaWRcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHdpbmRvd0lkOiBudW1iZXIsIHByaXZhdGUgZWRpdG9ySWQ6IG51bWJlcikge31cclxuICBwdWJsaWMgYXN5bmMgc2Nyb2xsVG9CdWZmZXJSYW5nZShhcmc6IFtudW1iZXIsIG51bWJlcl0pIHtcclxuICAgIHJldHVybiB0aGlzLmlwYygnc2Nyb2xsVG9CdWZmZXJSYW5nZScsIGFyZylcclxuICB9XHJcbiAgcHVibGljIGFzeW5jIGRlc3Ryb3koKSB7XHJcbiAgICByZXR1cm4gdGhpcy5pcGMoJ2Rlc3Ryb3knLCB1bmRlZmluZWQpXHJcbiAgfVxyXG4gIHB1YmxpYyBhc3luYyBpbml0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaXBjKCdpbml0JywgdW5kZWZpbmVkKVxyXG4gIH1cclxuICBwdWJsaWMgYXN5bmMgb3BlblNvdXJjZShhcmc/OiBudW1iZXIpIHtcclxuICAgIHJldHVybiB0aGlzLmlwYygnb3BlblNvdXJjZScsIGFyZylcclxuICB9XHJcbiAgcHVibGljIGRpc3Bvc2UoKSB7XHJcbiAgICAvLyBUT0RPXHJcbiAgfVxyXG4gIHByaXZhdGUgYXN5bmMgaXBjPFQgZXh0ZW5kcyBrZXlvZiBJUENDbWQ+KFxyXG4gICAgY21kOiBULFxyXG4gICAgYXJnczogQXJnPElQQ0NtZFtUXT4sXHJcbiAgKTogUHJvbWlzZTxSZXR1cm5UeXBlPElQQ0NtZFtUXT4+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxhbnk+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgaWR4ID0gdGhpcy5pcGNJZHgrK1xyXG4gICAgICBjb25zdCBoYW5kbGVyID0gKGU6IHtcclxuICAgICAgICBlZGl0b3JJZDogbnVtYmVyXHJcbiAgICAgICAgd2luZG93SWQ6IG51bWJlclxyXG4gICAgICAgIGZvcldpbmRvd0lkOiBudW1iZXJcclxuICAgICAgICBpZHg6IG51bWJlclxyXG4gICAgICAgIHJlcGx5OiBhbnlcclxuICAgICAgfSkgPT4ge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGUuZm9yV2luZG93SWQgPT09IHRoaXMubXlXaW5kb3dJZCAmJlxyXG4gICAgICAgICAgZS53aW5kb3dJZCA9PT0gdGhpcy53aW5kb3dJZCAmJlxyXG4gICAgICAgICAgZS5lZGl0b3JJZCA9PT0gdGhpcy5lZGl0b3JJZCAmJlxyXG4gICAgICAgICAgZS5pZHggPT09IGlkeFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgcmVtb3RlLmlwY01haW4ucmVtb3ZlTGlzdGVuZXIoXHJcbiAgICAgICAgICAgICdtYXJrZG93bi1wcmV2aWV3LXBsdXM6ZWRpdG9yLXJlcGx5JyxcclxuICAgICAgICAgICAgaGFuZGxlcixcclxuICAgICAgICAgIClcclxuICAgICAgICAgIHJlc29sdmUoZS5yZXBseSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgcmVzID0gcmVtb3RlLmlwY01haW4uZW1pdCgnbWFya2Rvd24tcHJldmlldy1wbHVzOmVkaXRvci1yZXF1ZXN0Jywge1xyXG4gICAgICAgIHdpbmRvd0lkOiB0aGlzLndpbmRvd0lkLFxyXG4gICAgICAgIGVkaXRvcklkOiB0aGlzLmVkaXRvcklkLFxyXG4gICAgICAgIGZvcldpbmRvd0lkOiB0aGlzLm15V2luZG93SWQsXHJcbiAgICAgICAgaWR4LFxyXG4gICAgICAgIGNtZCxcclxuICAgICAgICBhcmdzLFxyXG4gICAgICB9KVxyXG4gICAgICBpZiAoIXJlcykge1xyXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ05vYm9keSBpcyBsaXN0ZW5pbmcgZm9yIGVkaXRvciByZXF1ZXN0cycpKVxyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9IC8vIG90aGVyd2lzZSxcclxuICAgICAgcmVtb3RlLmlwY01haW4ub24oJ21hcmtkb3duLXByZXZpZXctcGx1czplZGl0b3ItcmVwbHknLCBoYW5kbGVyKVxyXG4gICAgfSlcclxuICB9XHJcbn1cclxuIl19