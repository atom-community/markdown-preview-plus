"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
class RequestHandler {
    constructor(windowId, editorId, handlers) {
        this.windowId = windowId;
        this.editorId = editorId;
        this.handlers = handlers;
        this.handleRequest = (e) => {
            if (e.editorId !== this.editorId || e.windowId !== this.windowId)
                return;
            const func = this.handlers[e.cmd];
            const reply = func(e.args);
            electron_1.remote.ipcMain.emit('markdown-preview-plus:editor-reply', {
                editorId: e.editorId,
                windowId: e.windowId,
                forWindowId: e.forWindowId,
                idx: e.idx,
                reply,
            });
        };
        electron_1.remote.ipcMain.on('markdown-preview-plus:editor-request', this.handleRequest);
    }
    dispose() {
        electron_1.remote.ipcMain.removeListener('markdown-preview-plus:editor-request', this.handleRequest);
    }
}
exports.RequestHandler = RequestHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC1oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21hcmtkb3duLXByZXZpZXctdmlldy9pcGMvcmVxdWVzdC1oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQWlDO0FBK0JqQyxNQUFhLGNBQWM7SUFDekIsWUFDbUIsUUFBZ0IsRUFDaEIsUUFBZ0IsRUFDaEIsUUFBZ0I7UUFGaEIsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUNoQixhQUFRLEdBQVIsUUFBUSxDQUFRO1FBQ2hCLGFBQVEsR0FBUixRQUFRLENBQVE7UUFlNUIsa0JBQWEsR0FBRyxDQUFDLENBQXlCLEVBQUUsRUFBRTtZQUNuRCxJQUFJLENBQUMsQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxRQUFRO2dCQUFFLE9BQU07WUFDeEUsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFhLENBQUE7WUFDN0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUMxQixpQkFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsb0NBQW9DLEVBQUU7Z0JBQ3hELFFBQVEsRUFBRSxDQUFDLENBQUMsUUFBUTtnQkFDcEIsUUFBUSxFQUFFLENBQUMsQ0FBQyxRQUFRO2dCQUNwQixXQUFXLEVBQUUsQ0FBQyxDQUFDLFdBQVc7Z0JBQzFCLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRztnQkFDVixLQUFLO2FBQ04sQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFBO1FBeEJDLGlCQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FDZixzQ0FBc0MsRUFDdEMsSUFBSSxDQUFDLGFBQWEsQ0FDbkIsQ0FBQTtJQUNILENBQUM7SUFFTSxPQUFPO1FBQ1osaUJBQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUMzQixzQ0FBc0MsRUFDdEMsSUFBSSxDQUFDLGFBQWEsQ0FDbkIsQ0FBQTtJQUNILENBQUM7Q0FjRjtBQS9CRCx3Q0ErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW1vdGUgfSBmcm9tICdlbGVjdHJvbidcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVBDQ21kIHtcclxuICBzY3JvbGxUb0J1ZmZlclJhbmdlOiAoYXJnOiBbbnVtYmVyLCBudW1iZXJdKSA9PiB2b2lkXHJcbiAgZGVzdHJveTogKGFyZzogdm9pZCkgPT4gdm9pZFxyXG4gIGluaXQ6IChcclxuICAgIGFyZzogdm9pZCxcclxuICApID0+IHtcclxuICAgIHRleHQ6IHN0cmluZ1xyXG4gICAgdGl0bGU6IHN0cmluZ1xyXG4gICAgZ3JhbW1hcjogc3RyaW5nXHJcbiAgICBwYXRoOiBzdHJpbmcgfCB1bmRlZmluZWRcclxuICB9XHJcbiAgb3BlblNvdXJjZTogKGFyZz86IG51bWJlcikgPT4gdm9pZFxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBFdmVudEZvciA9IHtcclxuICBbSyBpbiBrZXlvZiBJUENDbWRdOiB7XHJcbiAgICBlZGl0b3JJZDogbnVtYmVyXHJcbiAgICB3aW5kb3dJZDogbnVtYmVyXHJcbiAgICBmb3JXaW5kb3dJZDogbnVtYmVyXHJcbiAgICBpZHg6IG51bWJlclxyXG4gICAgY21kOiBLXHJcbiAgICBhcmdzOiBBcmc8SVBDQ21kW0tdPlxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgQXJnPFQgZXh0ZW5kcyAoYXJnOiBhbnkpID0+IGFueT4gPSBUIGV4dGVuZHMgKGFyZzogaW5mZXIgVSkgPT4gYW55XHJcbiAgPyBVXHJcbiAgOiBuZXZlclxyXG5cclxuZXhwb3J0IGNsYXNzIFJlcXVlc3RIYW5kbGVyIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgd2luZG93SWQ6IG51bWJlcixcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZWRpdG9ySWQ6IG51bWJlcixcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlcnM6IElQQ0NtZCxcclxuICApIHtcclxuICAgIHJlbW90ZS5pcGNNYWluLm9uKFxyXG4gICAgICAnbWFya2Rvd24tcHJldmlldy1wbHVzOmVkaXRvci1yZXF1ZXN0JyxcclxuICAgICAgdGhpcy5oYW5kbGVSZXF1ZXN0LFxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc3Bvc2UoKSB7XHJcbiAgICByZW1vdGUuaXBjTWFpbi5yZW1vdmVMaXN0ZW5lcihcclxuICAgICAgJ21hcmtkb3duLXByZXZpZXctcGx1czplZGl0b3ItcmVxdWVzdCcsXHJcbiAgICAgIHRoaXMuaGFuZGxlUmVxdWVzdCxcclxuICAgIClcclxuICB9XHJcblxyXG4gIHB1YmxpYyBoYW5kbGVSZXF1ZXN0ID0gKGU6IEV2ZW50Rm9yW2tleW9mIElQQ0NtZF0pID0+IHtcclxuICAgIGlmIChlLmVkaXRvcklkICE9PSB0aGlzLmVkaXRvcklkIHx8IGUud2luZG93SWQgIT09IHRoaXMud2luZG93SWQpIHJldHVyblxyXG4gICAgY29uc3QgZnVuYyA9IHRoaXMuaGFuZGxlcnNbZS5jbWRdIGFzIEZ1bmN0aW9uXHJcbiAgICBjb25zdCByZXBseSA9IGZ1bmMoZS5hcmdzKVxyXG4gICAgcmVtb3RlLmlwY01haW4uZW1pdCgnbWFya2Rvd24tcHJldmlldy1wbHVzOmVkaXRvci1yZXBseScsIHtcclxuICAgICAgZWRpdG9ySWQ6IGUuZWRpdG9ySWQsXHJcbiAgICAgIHdpbmRvd0lkOiBlLndpbmRvd0lkLFxyXG4gICAgICBmb3JXaW5kb3dJZDogZS5mb3JXaW5kb3dJZCxcclxuICAgICAgaWR4OiBlLmlkeCxcclxuICAgICAgcmVwbHksXHJcbiAgICB9KVxyXG4gIH1cclxufVxyXG4iXX0=