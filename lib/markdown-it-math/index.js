"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const table_1 = require("./lib/table");
function skipTextCommand(state, max) {
    const textCommand = state.src.slice(state.pos, state.pos + 5);
    const curPos = state.pos;
    if (textCommand === '\\text') {
        state.pos += 5;
        while (state.src[state.pos] === ' ') {
            state.pos++;
        }
        if (state.src[state.pos] !== '{') {
            state.pos = curPos;
        }
        else {
            while (state.src[state.pos] !== '}' && state.pos < max) {
                state.pos++;
            }
        }
    }
}
function scanDelims(state, start, delimLength) {
    let pos = start;
    let lastChar;
    let nextChar;
    let count;
    let canOpen;
    let canClose;
    let isLastWhiteSpace;
    let isLastPunctChar;
    let isNextWhiteSpace;
    let isNextPunctChar;
    let leftFlanking = true;
    let rightFlanking = true;
    const max = state.posMax;
    const isWhiteSpace = state.md.utils.isWhiteSpace;
    const isPunctChar = state.md.utils.isPunctChar;
    const isMdAsciiPunct = state.md.utils.isMdAsciiPunct;
    lastChar = start > 0 ? state.src.charCodeAt(start - 1) : 0x20;
    if (pos >= max) {
        canOpen = false;
    }
    pos += delimLength;
    count = pos - start;
    nextChar = pos < max ? state.src.charCodeAt(pos) : 0x20;
    isLastPunctChar =
        isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
    isNextPunctChar =
        isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
    isLastWhiteSpace = isWhiteSpace(lastChar);
    isNextWhiteSpace = isWhiteSpace(nextChar);
    if (isNextWhiteSpace) {
        leftFlanking = false;
    }
    else if (isNextPunctChar) {
        if (!(isLastWhiteSpace || isLastPunctChar)) {
            leftFlanking = false;
        }
    }
    if (isLastWhiteSpace) {
        rightFlanking = false;
    }
    else if (isLastPunctChar) {
        if (!(isNextWhiteSpace || isNextPunctChar)) {
            rightFlanking = false;
        }
    }
    canOpen = leftFlanking;
    canClose = rightFlanking;
    return {
        can_open: canOpen,
        can_close: canClose,
        delims: count,
    };
}
function makeMath_inline(delims) {
    return function math_inline(state, silent) {
        let startCount;
        let found;
        let res;
        let token;
        let closeDelim;
        const max = state.posMax;
        const start = state.pos;
        const foundDelims = delims.find(function (i) {
            const open = i[0];
            const openDelim = state.src.slice(start, start + open.length);
            return openDelim === open;
        });
        if (!foundDelims) {
            return false;
        }
        const open = foundDelims[0];
        const close = foundDelims[1];
        if (silent) {
            return false;
        }
        res = scanDelims(state, start, open.length);
        startCount = res.delims;
        if (!res.can_open) {
            state.pos += startCount;
            state.pending += state.src.slice(start, state.pos);
            return true;
        }
        state.pos = start + open.length;
        while (state.pos < max) {
            closeDelim = state.src.slice(state.pos, state.pos + close.length);
            if (closeDelim === close) {
                res = scanDelims(state, state.pos, close.length);
                if (res.can_close) {
                    found = true;
                    break;
                }
            }
            skipTextCommand(state, max);
            state.md.inline.skipToken(state);
        }
        if (!found) {
            state.pos = start;
            return false;
        }
        state.posMax = state.pos;
        state.pos = start + close.length;
        token = state.push('math_inline', 'math', 0);
        token.content = state.src.slice(state.pos, state.posMax);
        token.markup = open;
        state.pos = state.posMax + close.length;
        state.posMax = max;
        return true;
    };
}
function makeMath_block(delims) {
    return function math_block(state, startLine, endLine, silent) {
        let len;
        let nextLine;
        let token;
        let firstLine;
        let lastLine;
        let lastLinePos;
        let closeDelim;
        let haveEndMarker = false;
        let closeStartsAtNewline = false;
        let pos = state.bMarks[startLine] + state.tShift[startLine];
        let max = state.eMarks[startLine];
        const foundDelims = delims.find(function (i) {
            const open = i[0];
            const openDelim = state.src.slice(pos, pos + open.length);
            return openDelim === open;
        });
        if (!foundDelims) {
            return false;
        }
        const open = foundDelims[0];
        let close = foundDelims[1];
        if (close[0] === '\n') {
            closeStartsAtNewline = true;
            close = close.slice(1);
        }
        if (pos + open.length > max + 1) {
            return false;
        }
        pos += open.length;
        firstLine = state.src.slice(pos, max);
        if (silent) {
            return true;
        }
        if (firstLine.trim().slice(-close.length) === close) {
            firstLine = firstLine.trim().slice(0, -close.length);
            haveEndMarker = true;
        }
        nextLine = startLine;
        for (;;) {
            if (haveEndMarker) {
                break;
            }
            nextLine++;
            if (nextLine >= endLine) {
                break;
            }
            pos = state.bMarks[nextLine] + state.tShift[nextLine];
            max = state.eMarks[nextLine];
            if (pos < max && state.tShift[nextLine] < state.blkIndent) {
                break;
            }
            closeDelim = closeStartsAtNewline
                ? state.src.slice(pos, max).trim()
                : state.src
                    .slice(pos, max)
                    .trim()
                    .slice(-close.length);
            if (closeDelim !== close) {
                continue;
            }
            if (state.tShift[nextLine] - state.blkIndent >= 4) {
                continue;
            }
            lastLinePos = state.src.slice(0, max).lastIndexOf(close);
            lastLine = state.src.slice(pos, lastLinePos);
            pos += lastLine.length + close.length;
            pos = state.skipSpaces(pos);
            if (pos < max) {
                continue;
            }
            haveEndMarker = true;
        }
        len = state.tShift[startLine];
        state.line = nextLine + (haveEndMarker ? 1 : 0);
        token = state.push('math_block', 'math', 0);
        token.block = true;
        token.content =
            (firstLine && firstLine.trim() ? firstLine + '\n' : '') +
                state.getLines(startLine + 1, nextLine, len, true) +
                (lastLine && lastLine.trim() ? lastLine : '');
        token.map = [startLine, state.line];
        token.markup = open;
        return true;
    };
}
function makeMathRenderer(renderingOptions = {}) {
    return renderingOptions.display === 'block'
        ? function (tokens, idx) {
            return '<div class="math block">' + tokens[idx].content + '</div>\n';
        }
        : function (tokens, idx) {
            return '<span class="math inline">' + tokens[idx].content + '</span>';
        };
}
function math_plugin(md, options = {}) {
    const inlineDelim = options.inlineDelim || [['$$', '$$']];
    const blockDelim = options.blockDelim || [['$$$', '$$$']];
    const oInlineRenderer = options.inlineRenderer;
    const oBlockRenderer = options.blockRenderer;
    const inlineRenderer = oInlineRenderer
        ? function (tokens, idx) {
            return oInlineRenderer(tokens[idx].content);
        }
        : makeMathRenderer(options.renderingOptions);
    const blockRenderer = oBlockRenderer
        ? function (tokens, idx) {
            return oBlockRenderer(tokens[idx].content) + '\n';
        }
        : makeMathRenderer(Object.assign({ display: 'block' }, options.renderingOptions));
    const mathInline = makeMath_inline(inlineDelim);
    const mathBlock = makeMath_block(blockDelim);
    md.inline.ruler.before('escape', 'math_inline', mathInline);
    md.block.ruler.after('blockquote', 'math_block', mathBlock, {
        alt: ['paragraph', 'reference', 'blockquote', 'list'],
    });
    md.renderer.rules.math_inline = inlineRenderer;
    md.renderer.rules.math_block = blockRenderer;
    const tableBlock = table_1.makeTable({
        inlineDelim,
        blockDelim,
    });
    md.block.ruler.at('table', tableBlock, {
        alt: ['paragraph', 'reference'],
    });
}
exports.math_plugin = math_plugin;
//# sourceMappingURL=data:application/json;base64,