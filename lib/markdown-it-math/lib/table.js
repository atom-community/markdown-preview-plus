"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getLine(state, line) {
    const pos = state.bMarks[line] + state.blkIndent;
    const max = state.eMarks[line];
    return state.src.substr(pos, max - pos);
}
function escapedSplit(str, openDelims, closeDelims) {
    const result = [];
    let pos = 0;
    const max = str.length;
    let ch;
    let escapes = 0;
    let lastPos = 0;
    let lastDelim = 0;
    let delimed = false;
    let delimMaskMap;
    let openDelimIdx = -1;
    let closeDelimIdx = -1;
    ch = str.charCodeAt(pos);
    delimMaskMap = function (e) {
        return str.substring(pos, pos + e.length) === e;
    };
    while (pos < max) {
        openDelimIdx = openDelims.map(delimMaskMap).indexOf(true);
        closeDelimIdx = closeDelims.map(delimMaskMap).indexOf(true);
        if (openDelimIdx > -1 && escapes % 2 === 0 && !delimed) {
            delimed = !delimed;
            lastDelim = pos + openDelims[openDelimIdx].length - 1;
            pos += openDelims[openDelimIdx].length - 1;
        }
        else if (closeDelimIdx > -1 && escapes % 2 === 0 && delimed) {
            delimed = !delimed;
            lastDelim = pos + closeDelims[closeDelimIdx].length - 1;
            pos += closeDelims[closeDelimIdx].length - 1;
        }
        else if (ch === 0x7c && escapes % 2 === 0 && !delimed) {
            result.push(str.substring(lastPos, pos));
            lastPos = pos + 1;
        }
        else if (ch === 0x5c) {
            escapes++;
        }
        else {
            escapes = 0;
        }
        pos++;
        if (pos === max && delimed) {
            delimed = false;
            pos = lastDelim + 1;
        }
        ch = str.charCodeAt(pos);
    }
    result.push(str.substring(lastPos));
    return result;
}
function table(openDelims, closeDelims, state, startLine, endLine, silent) {
    let ch;
    let lineText;
    let pos;
    let i;
    let nextLine;
    let columns;
    let columnCount;
    let token;
    let aligns;
    let t;
    let tableLines;
    let tbodyLines;
    if (startLine + 2 > endLine) {
        return false;
    }
    nextLine = startLine + 1;
    if (state.sCount[nextLine] < state.blkIndent) {
        return false;
    }
    pos = state.bMarks[nextLine] + state.tShift[nextLine];
    if (pos >= state.eMarks[nextLine]) {
        return false;
    }
    ch = state.src.charCodeAt(pos);
    if (ch !== 0x7c && ch !== 0x2d && ch !== 0x3a) {
        return false;
    }
    lineText = getLine(state, startLine + 1);
    if (!/^[-:| ]+$/.test(lineText)) {
        return false;
    }
    columns = lineText.split('|');
    aligns = [];
    for (i = 0; i < columns.length; i++) {
        t = columns[i].trim();
        if (!t) {
            if (i === 0 || i === columns.length - 1) {
                continue;
            }
            else {
                return false;
            }
        }
        if (!/^:?-+:?$/.test(t)) {
            return false;
        }
        if (t.charCodeAt(t.length - 1) === 0x3a) {
            aligns.push(t.charCodeAt(0) === 0x3a ? 'center' : 'right');
        }
        else if (t.charCodeAt(0) === 0x3a) {
            aligns.push('left');
        }
        else {
            aligns.push('');
        }
    }
    lineText = getLine(state, startLine).trim();
    if (lineText.indexOf('|') === -1) {
        return false;
    }
    columns = escapedSplit(lineText.replace(/^\||\|$/g, ''), openDelims, closeDelims);
    columnCount = columns.length;
    if (columnCount > aligns.length) {
        return false;
    }
    if (silent) {
        return true;
    }
    token = state.push('table_open', 'table', 1);
    token.map = tableLines = [startLine, 0];
    token = state.push('thead_open', 'thead', 1);
    token.map = [startLine, startLine + 1];
    token = state.push('tr_open', 'tr', 1);
    token.map = [startLine, startLine + 1];
    for (i = 0; i < columns.length; i++) {
        token = state.push('th_open', 'th', 1);
        token.map = [startLine, startLine + 1];
        if (aligns[i]) {
            token.attrs = [['style', 'text-align:' + aligns[i]]];
        }
        token = state.push('inline', '', 0);
        token.content = columns[i].trim();
        token.map = [startLine, startLine + 1];
        token.children = [];
        token = state.push('th_close', 'th', -1);
    }
    token = state.push('tr_close', 'tr', -1);
    token = state.push('thead_close', 'thead', -1);
    token = state.push('tbody_open', 'tbody', 1);
    token.map = tbodyLines = [startLine + 2, 0];
    for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
        if (state.sCount[nextLine] < state.blkIndent) {
            break;
        }
        lineText = getLine(state, nextLine).trim();
        if (lineText.indexOf('|') === -1) {
            break;
        }
        columns = escapedSplit(lineText.replace(/^\||\|$/g, ''), openDelims, closeDelims);
        token = state.push('tr_open', 'tr', 1);
        for (i = 0; i < columnCount; i++) {
            token = state.push('td_open', 'td', 1);
            if (aligns[i]) {
                token.attrs = [['style', 'text-align:' + aligns[i]]];
            }
            token = state.push('inline', '', 0);
            token.content = columns[i] ? columns[i].trim() : '';
            token.children = [];
            token = state.push('td_close', 'td', -1);
        }
        token = state.push('tr_close', 'tr', -1);
    }
    token = state.push('tbody_close', 'tbody', -1);
    token = state.push('table_close', 'table', -1);
    tableLines[1] = tbodyLines[1] = nextLine;
    state.line = nextLine;
    return true;
}
function makeTable(options) {
    const openDelims = options.inlineDelim.map((i) => i[0]);
    const closeDelims = options.inlineDelim.map((i) => i[1]);
    openDelims.unshift('`');
    closeDelims.unshift('`');
    return table.bind(null, openDelims, closeDelims);
}
exports.makeTable = makeTable;
//# sourceMappingURL=data:application/json;base64,