"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getLine(state, line) {
    const pos = state.bMarks[line] + state.blkIndent;
    const max = state.eMarks[line];
    return state.src.substr(pos, max - pos);
}
function escapedSplit(str, openDelims, closeDelims) {
    const result = [];
    let pos = 0;
    const max = str.length;
    let ch;
    let escapes = 0;
    let lastPos = 0;
    let lastDelim = 0;
    let delimed = false;
    let delimMaskMap;
    let openDelimIdx = -1;
    let closeDelimIdx = -1;
    ch = str.charCodeAt(pos);
    delimMaskMap = function (e) {
        return str.substring(pos, pos + e.length) === e;
    };
    while (pos < max) {
        openDelimIdx = openDelims.map(delimMaskMap).indexOf(true);
        closeDelimIdx = closeDelims.map(delimMaskMap).indexOf(true);
        if (openDelimIdx > -1 && escapes % 2 === 0 && !delimed) {
            delimed = !delimed;
            lastDelim = pos + openDelims[openDelimIdx].length - 1;
            pos += openDelims[openDelimIdx].length - 1;
        }
        else if (closeDelimIdx > -1 && escapes % 2 === 0 && delimed) {
            delimed = !delimed;
            lastDelim = pos + closeDelims[closeDelimIdx].length - 1;
            pos += closeDelims[closeDelimIdx].length - 1;
        }
        else if (ch === 0x7c && escapes % 2 === 0 && !delimed) {
            result.push(str.substring(lastPos, pos));
            lastPos = pos + 1;
        }
        else if (ch === 0x5c) {
            escapes++;
        }
        else {
            escapes = 0;
        }
        pos++;
        if (pos === max && delimed) {
            delimed = false;
            pos = lastDelim + 1;
        }
        ch = str.charCodeAt(pos);
    }
    result.push(str.substring(lastPos));
    return result;
}
function table(openDelims, closeDelims, state, startLine, endLine, silent) {
    let ch;
    let lineText;
    let pos;
    let i;
    let nextLine;
    let columns;
    let columnCount;
    let token;
    let aligns;
    let t;
    let tableLines;
    let tbodyLines;
    if (startLine + 2 > endLine) {
        return false;
    }
    nextLine = startLine + 1;
    if (state.sCount[nextLine] < state.blkIndent) {
        return false;
    }
    pos = state.bMarks[nextLine] + state.tShift[nextLine];
    if (pos >= state.eMarks[nextLine]) {
        return false;
    }
    ch = state.src.charCodeAt(pos);
    if (ch !== 0x7c && ch !== 0x2d && ch !== 0x3a) {
        return false;
    }
    lineText = getLine(state, startLine + 1);
    if (!/^[-:| ]+$/.test(lineText)) {
        return false;
    }
    columns = lineText.split('|');
    aligns = [];
    for (i = 0; i < columns.length; i++) {
        t = columns[i].trim();
        if (!t) {
            if (i === 0 || i === columns.length - 1) {
                continue;
            }
            else {
                return false;
            }
        }
        if (!/^:?-+:?$/.test(t)) {
            return false;
        }
        if (t.charCodeAt(t.length - 1) === 0x3a) {
            aligns.push(t.charCodeAt(0) === 0x3a ? 'center' : 'right');
        }
        else if (t.charCodeAt(0) === 0x3a) {
            aligns.push('left');
        }
        else {
            aligns.push('');
        }
    }
    lineText = getLine(state, startLine).trim();
    if (lineText.indexOf('|') === -1) {
        return false;
    }
    columns = escapedSplit(lineText.replace(/^\||\|$/g, ''), openDelims, closeDelims);
    columnCount = columns.length;
    if (columnCount > aligns.length) {
        return false;
    }
    if (silent) {
        return true;
    }
    token = state.push('table_open', 'table', 1);
    token.map = tableLines = [startLine, 0];
    token = state.push('thead_open', 'thead', 1);
    token.map = [startLine, startLine + 1];
    token = state.push('tr_open', 'tr', 1);
    token.map = [startLine, startLine + 1];
    for (i = 0; i < columns.length; i++) {
        token = state.push('th_open', 'th', 1);
        token.map = [startLine, startLine + 1];
        if (aligns[i]) {
            token.attrs = [['style', 'text-align:' + aligns[i]]];
        }
        token = state.push('inline', '', 0);
        token.content = columns[i].trim();
        token.map = [startLine, startLine + 1];
        token.children = [];
        token = state.push('th_close', 'th', -1);
    }
    token = state.push('tr_close', 'tr', -1);
    token = state.push('thead_close', 'thead', -1);
    token = state.push('tbody_open', 'tbody', 1);
    token.map = tbodyLines = [startLine + 2, 0];
    for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
        if (state.sCount[nextLine] < state.blkIndent) {
            break;
        }
        lineText = getLine(state, nextLine).trim();
        if (lineText.indexOf('|') === -1) {
            break;
        }
        columns = escapedSplit(lineText.replace(/^\||\|$/g, ''), openDelims, closeDelims);
        token = state.push('tr_open', 'tr', 1);
        for (i = 0; i < columnCount; i++) {
            token = state.push('td_open', 'td', 1);
            if (aligns[i]) {
                token.attrs = [['style', 'text-align:' + aligns[i]]];
            }
            token = state.push('inline', '', 0);
            token.content = columns[i] ? columns[i].trim() : '';
            token.children = [];
            token = state.push('td_close', 'td', -1);
        }
        token = state.push('tr_close', 'tr', -1);
    }
    token = state.push('tbody_close', 'tbody', -1);
    token = state.push('table_close', 'table', -1);
    tableLines[1] = tbodyLines[1] = nextLine;
    state.line = nextLine;
    return true;
}
function makeTable(options) {
    const openDelims = options.inlineDelim.map((i) => i[0]);
    const closeDelims = options.inlineDelim.map((i) => i[1]);
    openDelims.unshift('`');
    closeDelims.unshift('`');
    return table.bind(null, openDelims, closeDelims);
}
exports.makeTable = makeTable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbWFya2Rvd24taXQtbWF0aC9saWIvdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJQSxpQkFBaUIsS0FBVSxFQUFFLElBQVk7SUFDdkMsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFBO0lBQ2hELE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFOUIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBQ3pDLENBQUM7QUFrQkQsc0JBQ0UsR0FBVyxFQUNYLFVBQW9CLEVBQ3BCLFdBQXFCO0lBRXJCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQTtJQUNqQixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFDWCxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFBO0lBQ3RCLElBQUksRUFBRSxDQUFBO0lBQ04sSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFBO0lBQ2YsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFBO0lBQ2YsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFBO0lBQ2pCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQTtJQUNuQixJQUFJLFlBQVksQ0FBQTtJQUNoQixJQUFJLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUNyQixJQUFJLGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUV0QixFQUFFLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUd4QixZQUFZLEdBQUcsVUFBUyxDQUFTO1FBQy9CLE9BQU8sR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMs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QUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3ZELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUV4RCxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3ZCLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFeEIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUE7QUFDbEQsQ0FBQztBQVJELDhCQVFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbWFya2Rvd24taXQtbWF0aEA0ODAyNDM5OmxpYi9ydWxlc19ibG9jay90YWJsZS5qc1xyXG4vLyBHRk0gdGFibGUsIG5vbi1zdGFuZGFyZFxyXG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby11bnNhZmUtYW55XHJcblxyXG5mdW5jdGlvbiBnZXRMaW5lKHN0YXRlOiBhbnksIGxpbmU6IG51bWJlcikge1xyXG4gIGNvbnN0IHBvcyA9IHN0YXRlLmJNYXJrc1tsaW5lXSArIHN0YXRlLmJsa0luZGVudFxyXG4gIGNvbnN0IG1heCA9IHN0YXRlLmVNYXJrc1tsaW5lXVxyXG5cclxuICByZXR1cm4gc3RhdGUuc3JjLnN1YnN0cihwb3MsIG1heCAtIHBvcylcclxufVxyXG5cclxuLyoqXHJcbiAqIFBhcnNlIGEgdGFibGUgcm93IGZvciBjb2x1bW5zL2NlbGxzXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgc3RyXHJcbiAqICAgVGhlIHRhYmxlIHJvdyB0byBwYXJzZSBmb3IgY29sdW1ucy5cclxuICogQHBhcmFtICBhcnJheSBvZiBzdHJpbmcgb3BlbkRlbGltc1xyXG4gKiAgIFRoZSBvcGVuaW5nIGRlbGltaXRlciBzZXF1ZW5jZXMgZm9yIGlubGluZXMgdGhhdCBwcmV2ZW50cyBhbnkgY29udGFpbmVkXHJcbiAqICAgcGlwZXMgZnJvbSBkZWxpbWl0aW5nIGNvbHVtbnMgb2YgdGhlIHBhcmVudCB0YWJsZSBibG9jay5cclxuICogQHBhcmFtICBhcnJheSBvZiBzdHJpbmcgY2xvc2VEZWxpbXNcclxuICogICBUaGUgY2xvc2luZyBkZWxpbWl0ZXIgc2VxdWVuY2UgZm9yIGFuIGlubGluZSB0aGF0IHByZXZlbnRzIGFueSBjb250YWluaW5nXHJcbiAqICAgcGlwZXMgZnJvbSBkZWxpbWl0aW5nIGNvbHVtbnMgb2YgdGhlIHBhcmVudCB0YWJsZSBibG9jay5cclxuICogQHJldHVybiBhcnJheSBvZiBzdHJpbmdcclxuICogICBUaGUgdW5wYXJzZWQgY29udGVudCBvZiB0aGUgY2VsbHMvY29sdW1ucyBpZGVudGlmaWVkIGluIHN0ciByZXR1cm5lZCBhc1xyXG4gKiAgIGluZGl2aWR1YWwgZWxlbWVudHMgb2YgYW4gYXJyYXkuIFRoZSBjb250ZW50IGlzIHN0aWxsIHRvIGJlIHBhcnNlZCBieSB0aGVcclxuICogICBpbmxpbmUgcnVsZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBlc2NhcGVkU3BsaXQoXHJcbiAgc3RyOiBzdHJpbmcsXHJcbiAgb3BlbkRlbGltczogc3RyaW5nW10sXHJcbiAgY2xvc2VEZWxpbXM6IHN0cmluZ1tdLFxyXG4pIHtcclxuICBjb25zdCByZXN1bHQgPSBbXVxyXG4gIGxldCBwb3MgPSAwXHJcbiAgY29uc3QgbWF4ID0gc3RyLmxlbmd0aFxyXG4gIGxldCBjaFxyXG4gIGxldCBlc2NhcGVzID0gMFxyXG4gIGxldCBsYXN0UG9zID0gMFxyXG4gIGxldCBsYXN0RGVsaW0gPSAwXHJcbiAgbGV0IGRlbGltZWQgPSBmYWxzZVxyXG4gIGxldCBkZWxpbU1hc2tNYXBcclxuICBsZXQgb3BlbkRlbGltSWR4ID0gLTFcclxuICBsZXQgY2xvc2VEZWxpbUlkeCA9IC0xXHJcblxyXG4gIGNoID0gc3RyLmNoYXJDb2RlQXQocG9zKVxyXG5cclxuICAvLyBEZWYgbWFwIGZvciBtYXRjaGluZyBvcGVuL2Nsb3NlIGRlbGltaXRlciBzZXF1ZW5jZSB3aXRoIHN0ckBwb3NcclxuICBkZWxpbU1hc2tNYXAgPSBmdW5jdGlvbihlOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKHBvcywgcG9zICsgZS5sZW5ndGgpID09PSBlXHJcbiAgfVxyXG5cclxuICB3aGlsZSAocG9zIDwgbWF4KSB7XHJcbiAgICAvLyBEZXRlcm1pbmUgSUQgb2YgZmlyc3QgbWF0Y2hpbmcgb3Blbi9jbG9zZSBkZWxpbWl0ZXIgc2VxdWVuY2VcclxuICAgIG9wZW5EZWxpbUlkeCA9IG9wZW5EZWxpbXMubWFwKGRlbGltTWFza01hcCkuaW5kZXhPZih0cnVlKVxyXG4gICAgY2xvc2VEZWxpbUlkeCA9IGNsb3NlRGVsaW1zLm1hcChkZWxpbU1hc2tNYXApLmluZGV4T2YodHJ1ZSlcclxuXHJcbiAgICAvLyBEb2VzIHN0ckBwb3MgbWF0Y2ggYW55IG9wZW5pbmcgZGVsaW1pdGVyP1xyXG4gICAgaWYgKG9wZW5EZWxpbUlkeCA+IC0xICYmIGVzY2FwZXMgJSAyID09PSAwICYmICFkZWxpbWVkKSB7XHJcbiAgICAgIGRlbGltZWQgPSAhZGVsaW1lZFxyXG4gICAgICBsYXN0RGVsaW0gPSBwb3MgKyBvcGVuRGVsaW1zW29wZW5EZWxpbUlkeF0ubGVuZ3RoIC0gMVxyXG4gICAgICBwb3MgKz0gb3BlbkRlbGltc1tvcGVuRGVsaW1JZHhdLmxlbmd0aCAtIDFcclxuICAgICAgLy8gRG9lcyBzdHJAcG9zIG1hdGNoIGFueSBjbG9zaW5nIGRlbGltaXRlcj9cclxuICAgIH0gZWxzZSBpZiAoY2xvc2VEZWxpbUlkeCA+IC0xICYmIGVzY2FwZXMgJSAyID09PSAwICYmIGRlbGltZWQpIHtcclxuICAgICAgZGVsaW1lZCA9ICFkZWxpbWVkXHJcbiAgICAgIGxhc3REZWxpbSA9IHBvcyArIGNsb3NlRGVsaW1zW2Nsb3NlRGVsaW1JZHhdLmxlbmd0aCAtIDFcclxuICAgICAgcG9zICs9IGNsb3NlRGVsaW1zW2Nsb3NlRGVsaW1JZHhdLmxlbmd0aCAtIDFcclxuICAgIH0gZWxzZSBpZiAoY2ggPT09IDB4N2MgLyogfCAqLyAmJiBlc2NhcGVzICUgMiA9PT0gMCAmJiAhZGVsaW1lZCkge1xyXG4gICAgICByZXN1bHQucHVzaChzdHIuc3Vic3RyaW5nKGxhc3RQb3MsIHBvcykpXHJcbiAgICAgIGxhc3RQb3MgPSBwb3MgKyAxXHJcbiAgICB9IGVsc2UgaWYgKGNoID09PSAweDVjIC8qIFxcICovKSB7XHJcbiAgICAgIGVzY2FwZXMrK1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZXNjYXBlcyA9IDBcclxuICAgIH1cclxuXHJcbiAgICBwb3MrK1xyXG5cclxuICAgIC8vIElmIHRoZXJlIHdhcyBhbiB1bi1jbG9zZWQgZGVsaW1pdGVyIHNlcXVlbmNlLCBnbyBiYWNrIHRvIGp1c3QgYWZ0ZXJcclxuICAgIC8vIHRoZSBsYXN0IGRlbGltaXRlciBzZXF1ZW5jZSwgYnV0IGFzIGlmIGl0IHdhcyBhIG5vcm1hbCBjaGFyYWN0ZXJcclxuICAgIGlmIChwb3MgPT09IG1heCAmJiBkZWxpbWVkKSB7XHJcbiAgICAgIGRlbGltZWQgPSBmYWxzZVxyXG4gICAgICBwb3MgPSBsYXN0RGVsaW0gKyAxXHJcbiAgICB9XHJcblxyXG4gICAgY2ggPSBzdHIuY2hhckNvZGVBdChwb3MpXHJcbiAgfVxyXG5cclxuICByZXN1bHQucHVzaChzdHIuc3Vic3RyaW5nKGxhc3RQb3MpKVxyXG5cclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIHRhYmxlIHBsb2NrIHBhcnNlciB3aXRoIHJlc3RyaWN0aW9ucyBvbiBwaXBlIHBsYWNlbWVudFxyXG4gKlxyXG4gKiBQYXJ0aWFsbHkgcG91bGF0ZWQgZG9jc3RyaW5nIGRlc2NyaWJpbmcgcGFyYW1ldGVycyBhZGRlZCB0b1xyXG4gKiBgbWFya2Rvd24taXQtbWF0aEA0ODAyNDM5OmxpYi9ydWxlc19ibG9jay90YWJsZS5qc2AuXHJcbiAqXHJcbiAqIEBwYXJhbSAgYXJyYXkgb2Ygc3RyaW5nIG9wZW5EZWxpbXNcclxuICogICBUaGUgb3BlbmluZyBkZWxpbWl0ZXIgc2VxdWVuY2VzIGZvciBpbmxpbmVzIHRoYXQgcHJldmVudHMgYW55IGNvbnRhaW5lZFxyXG4gKiAgIHBpcGVzIGZyb20gZGVsaW1pdGluZyBjb2x1bW5zIG9mIHRoZSBwYXJlbnQgdGFibGUgYmxvY2suXHJcbiAqIEBwYXJhbSAgYXJyYXkgb2Ygc3RyaW5nIGNsb3NlRGVsaW1zXHJcbiAqICAgVGhlIGNsb3NpbmcgZGVsaW1pdGVyIHNlcXVlbmNlIGZvciBhbiBpbmxpbmUgdGhhdCBwcmV2ZW50cyBhbnkgY29udGFpbmluZ1xyXG4gKiAgIHBpcGVzIGZyb20gZGVsaW1pdGluZyBjb2x1bW5zIG9mIHRoZSBwYXJlbnQgdGFibGUgYmxvY2suXHJcbiAqL1xyXG5mdW5jdGlvbiB0YWJsZShcclxuICBvcGVuRGVsaW1zOiBzdHJpbmdbXSxcclxuICBjbG9zZURlbGltczogc3RyaW5nW10sXHJcbiAgc3RhdGU6IGFueSxcclxuICBzdGFydExpbmU6IG51bWJlcixcclxuICBlbmRMaW5lOiBudW1iZXIsXHJcbiAgc2lsZW50OiBib29sZWFuLFxyXG4pIHtcclxuICBsZXQgY2hcclxuICBsZXQgbGluZVRleHRcclxuICBsZXQgcG9zXHJcbiAgbGV0IGlcclxuICBsZXQgbmV4dExpbmVcclxuICBsZXQgY29sdW1uc1xyXG4gIGxldCBjb2x1bW5Db3VudFxyXG4gIGxldCB0b2tlblxyXG4gIGxldCBhbGlnbnNcclxuICBsZXQgdFxyXG4gIGxldCB0YWJsZUxpbmVzXHJcbiAgbGV0IHRib2R5TGluZXNcclxuXHJcbiAgLy8gc2hvdWxkIGhhdmUgYXQgbGVhc3QgdGhyZWUgbGluZXNcclxuICBpZiAoc3RhcnRMaW5lICsgMiA+IGVuZExpbmUpIHtcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuXHJcbiAgbmV4dExpbmUgPSBzdGFydExpbmUgKyAxXHJcblxyXG4gIGlmIChzdGF0ZS5zQ291bnRbbmV4dExpbmVdIDwgc3RhdGUuYmxrSW5kZW50KSB7XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcblxyXG4gIC8vIGZpcnN0IGNoYXJhY3RlciBvZiB0aGUgc2Vjb25kIGxpbmUgc2hvdWxkIGJlICd8JyBvciAnLSdcclxuXHJcbiAgcG9zID0gc3RhdGUuYk1hcmtzW25leHRMaW5lXSArIHN0YXRlLnRTaGlmdFtuZXh0TGluZV1cclxuICBpZiAocG9zID49IHN0YXRlLmVNYXJrc1tuZXh0TGluZV0pIHtcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuXHJcbiAgY2ggPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpXHJcbiAgaWYgKGNoICE9PSAweDdjIC8qIHwgKi8gJiYgY2ggIT09IDB4MmQgLyogLSAqLyAmJiBjaCAhPT0gMHgzYSAvKiA6ICovKSB7XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcblxyXG4gIGxpbmVUZXh0ID0gZ2V0TGluZShzdGF0ZSwgc3RhcnRMaW5lICsgMSlcclxuICBpZiAoIS9eWy06fCBdKyQvLnRlc3QobGluZVRleHQpKSB7XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcblxyXG4gIGNvbHVtbnMgPSBsaW5lVGV4dC5zcGxpdCgnfCcpXHJcbiAgYWxpZ25zID0gW11cclxuICBmb3IgKGkgPSAwOyBpIDwgY29sdW1ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgdCA9IGNvbHVtbnNbaV0udHJpbSgpXHJcbiAgICBpZiAoIXQpIHtcclxuICAgICAgLy8gYWxsb3cgZW1wdHkgY29sdW1ucyBiZWZvcmUgYW5kIGFmdGVyIHRhYmxlLCBidXQgbm90IGluIGJldHdlZW4gY29sdW1ucztcclxuICAgICAgLy8gZS5nLiBhbGxvdyBgIHwtLS18IGAsIGRpc2FsbG93IGAgLS0tfHwtLS0gYFxyXG4gICAgICBpZiAoaSA9PT0gMCB8fCBpID09PSBjb2x1bW5zLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICBjb250aW51ZVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCEvXjo/LSs6PyQvLnRlc3QodCkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcbiAgICBpZiAodC5jaGFyQ29kZUF0KHQubGVuZ3RoIC0gMSkgPT09IDB4M2EgLyogOiAqLykge1xyXG4gICAgICBhbGlnbnMucHVzaCh0LmNoYXJDb2RlQXQoMCkgPT09IDB4M2EgLyogOiAqLyA/ICdjZW50ZXInIDogJ3JpZ2h0JylcclxuICAgIH0gZWxzZSBpZiAodC5jaGFyQ29kZUF0KDApID09PSAweDNhIC8qIDogKi8pIHtcclxuICAgICAgYWxpZ25zLnB1c2goJ2xlZnQnKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWxpZ25zLnB1c2goJycpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBsaW5lVGV4dCA9IGdldExpbmUoc3RhdGUsIHN0YXJ0TGluZSkudHJpbSgpXHJcbiAgaWYgKGxpbmVUZXh0LmluZGV4T2YoJ3wnKSA9PT0gLTEpIHtcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuICBjb2x1bW5zID0gZXNjYXBlZFNwbGl0KFxyXG4gICAgbGluZVRleHQucmVwbGFjZSgvXlxcfHxcXHwkL2csICcnKSxcclxuICAgIG9wZW5EZWxpbXMsXHJcbiAgICBjbG9zZURlbGltcyxcclxuICApXHJcblxyXG4gIC8vIGhlYWRlciByb3cgd2lsbCBkZWZpbmUgYW4gYW1vdW50IG9mIGNvbHVtbnMgaW4gdGhlIGVudGlyZSB0YWJsZSxcclxuICAvLyBhbmQgYWxpZ24gcm93IHNob3VsZG4ndCBiZSBzbWFsbGVyIHRoYW4gdGhhdCAodGhlIHJlc3Qgb2YgdGhlIHJvd3MgY2FuKVxyXG4gIGNvbHVtbkNvdW50ID0gY29sdW1ucy5sZW5ndGhcclxuICBpZiAoY29sdW1uQ291bnQgPiBhbGlnbnMubGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcblxyXG4gIGlmIChzaWxlbnQpIHtcclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG5cclxuICB0b2tlbiA9IHN0YXRlLnB1c2goJ3RhYmxlX29wZW4nLCAndGFibGUnLCAxKVxyXG4gIHRva2VuLm1hcCA9IHRhYmxlTGluZXMgPSBbc3RhcnRMaW5lLCAwXVxyXG5cclxuICB0b2tlbiA9IHN0YXRlLnB1c2goJ3RoZWFkX29wZW4nLCAndGhlYWQnLCAxKVxyXG4gIHRva2VuLm1hcCA9IFtzdGFydExpbmUsIHN0YXJ0TGluZSArIDFdXHJcblxyXG4gIHRva2VuID0gc3RhdGUucHVzaCgndHJfb3BlbicsICd0cicsIDEpXHJcbiAgdG9rZW4ubWFwID0gW3N0YXJ0TGluZSwgc3RhcnRMaW5lICsgMV1cclxuXHJcbiAgZm9yIChpID0gMDsgaSA8IGNvbHVtbnMubGVuZ3RoOyBpKyspIHtcclxuICAgIHRva2VuID0gc3RhdGUucHVzaCgndGhfb3BlbicsICd0aCcsIDEpXHJcbiAgICB0b2tlbi5tYXAgPSBbc3RhcnRMaW5lLCBzdGFydExpbmUgKyAxXVxyXG4gICAgaWYgKGFsaWduc1tpXSkge1xyXG4gICAgICB0b2tlbi5hdHRycyA9IFtbJ3N0eWxlJywgJ3RleHQtYWxpZ246JyArIGFsaWduc1tpXV1dXHJcbiAgICB9XHJcblxyXG4gICAgdG9rZW4gPSBzdGF0ZS5wdXNoKCdpbmxpbmUnLCAnJywgMClcclxuICAgIHRva2VuLmNvbnRlbnQgPSBjb2x1bW5zW2ldLnRyaW0oKVxyXG4gICAgdG9rZW4ubWFwID0gW3N0YXJ0TGluZSwgc3RhcnRMaW5lICsgMV1cclxuICAgIHRva2VuLmNoaWxkcmVuID0gW11cclxuXHJcbiAgICB0b2tlbiA9IHN0YXRlLnB1c2goJ3RoX2Nsb3NlJywgJ3RoJywgLTEpXHJcbiAgfVxyXG5cclxuICB0b2tlbiA9IHN0YXRlLnB1c2goJ3RyX2Nsb3NlJywgJ3RyJywgLTEpXHJcbiAgdG9rZW4gPSBzdGF0ZS5wdXNoKCd0aGVhZF9jbG9zZScsICd0aGVhZCcsIC0xKVxyXG5cclxuICB0b2tlbiA9IHN0YXRlLnB1c2goJ3Rib2R5X29wZW4nLCAndGJvZHknLCAxKVxyXG4gIHRva2VuLm1hcCA9IHRib2R5TGluZXMgPSBbc3RhcnRMaW5lICsgMiwgMF1cclxuXHJcbiAgZm9yIChuZXh0TGluZSA9IHN0YXJ0TGluZSArIDI7IG5leHRMaW5lIDwgZW5kTGluZTsgbmV4dExpbmUrKykge1xyXG4gICAgaWYgKHN0YXRlLnNDb3VudFtuZXh0TGluZV0gPCBzdGF0ZS5ibGtJbmRlbnQpIHtcclxuICAgICAgYnJlYWtcclxuICAgIH1cclxuXHJcbiAgICBsaW5lVGV4dCA9IGdldExpbmUoc3RhdGUsIG5leHRMaW5lKS50cmltKClcclxuICAgIGlmIChsaW5lVGV4dC5pbmRleE9mKCd8JykgPT09IC0xKSB7XHJcbiAgICAgIGJyZWFrXHJcbiAgICB9XHJcbiAgICBjb2x1bW5zID0gZXNjYXBlZFNwbGl0KFxyXG4gICAgICBsaW5lVGV4dC5yZXBsYWNlKC9eXFx8fFxcfCQvZywgJycpLFxyXG4gICAgICBvcGVuRGVsaW1zLFxyXG4gICAgICBjbG9zZURlbGltcyxcclxuICAgIClcclxuXHJcbiAgICB0b2tlbiA9IHN0YXRlLnB1c2goJ3RyX29wZW4nLCAndHInLCAxKVxyXG4gICAgZm9yIChpID0gMDsgaSA8IGNvbHVtbkNvdW50OyBpKyspIHtcclxuICAgICAgdG9rZW4gPSBzdGF0ZS5wdXNoKCd0ZF9vcGVuJywgJ3RkJywgMSlcclxuICAgICAgaWYgKGFsaWduc1tpXSkge1xyXG4gICAgICAgIHRva2VuLmF0dHJzID0gW1snc3R5bGUnLCAndGV4dC1hbGlnbjonICsgYWxpZ25zW2ldXV1cclxuICAgICAgfVxyXG5cclxuICAgICAgdG9rZW4gPSBzdGF0ZS5wdXNoKCdpbmxpbmUnLCAnJywgMClcclxuICAgICAgdG9rZW4uY29udGVudCA9IGNvbHVtbnNbaV0gPyBjb2x1bW5zW2ldLnRyaW0oKSA6ICcnXHJcbiAgICAgIHRva2VuLmNoaWxkcmVuID0gW11cclxuXHJcbiAgICAgIHRva2VuID0gc3RhdGUucHVzaCgndGRfY2xvc2UnLCAndGQnLCAtMSlcclxuICAgIH1cclxuICAgIHRva2VuID0gc3RhdGUucHVzaCgndHJfY2xvc2UnLCAndHInLCAtMSlcclxuICB9XHJcbiAgdG9rZW4gPSBzdGF0ZS5wdXNoKCd0Ym9keV9jbG9zZScsICd0Ym9keScsIC0xKVxyXG4gIHRva2VuID0gc3RhdGUucHVzaCgndGFibGVfY2xvc2UnLCAndGFibGUnLCAtMSlcclxuXHJcbiAgdGFibGVMaW5lc1sxXSA9IHRib2R5TGluZXNbMV0gPSBuZXh0TGluZVxyXG4gIHN0YXRlLmxpbmUgPSBuZXh0TGluZVxyXG4gIHJldHVybiB0cnVlXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQcmVwYXJlIGEgdGFibGUgcGxvY2sgcGFyc2VyIHdpdGggcmVzdHJpY3Rpb25zIG9uIHBpcGUgcGxhY2VtZW50XHJcbiAqXHJcbiAqIEBwYXJhbSAgc3RyaW5nIG9wZW5cclxuICogICBUaGUgb3BlbmluZyBkZWxpbWl0ZXIgc2VxdWVuY2UgZm9yIGFuIGlubGluZSB0aGF0IHByZXZlbnRzIGFueSBjb250YWluZWRcclxuICogICBwaXBlcyBmcm9tIGRlbGltaXRpbmcgY29sdW1ucyBvZiB0aGUgcGFyZW50IHRhYmxlIGJsb2NrLlxyXG4gKiBAcGFyYW0gIHN0cmluZyBjbG9zZVxyXG4gKiAgIFRoZSBjbG9zaW5nIGRlbGltaXRlciBzZXF1ZW5jZSBmb3IgYW4gaW5saW5lIHRoYXQgcHJldmVudHMgYW55IGNvbnRhaW5pbmdcclxuICogICBwaXBlcyBmcm9tIGRlbGltaXRpbmcgY29sdW1ucyBvZiB0aGUgcGFyZW50IHRhYmxlIGJsb2NrLlxyXG4gKiBAcmV0dXJuIGZ1bmN0aW9uXHJcbiAqICAgVGhlIHRhYmxlIGJsb2NrIHBhcnNlciB0aGF0IHNob3VsZCBiZSB1c2VkIGluIHBsYWNlIG9mIHRoZSBleGlzdGluZyB0YWJsZVxyXG4gKiAgIGJsb2NrIHBhcnNlciBzdWNoIHRoYXQgdGhlIHNwZWNpZmllZCBpbmxpbmUgYnkgYG9wZW5gIGFuZCBgY2xvc2VgIGlzXHJcbiAqICAgcmVzcGVjdGVkLiBUaGUgZGVsaW1pdGVycyBhcmUgYWRkZWQgdG8gZXhpc3RpbmcgbGlzdCBvZiBkZWxpbWl0ZXIgcGFpcnMgaW5cclxuICogICBgZXNjYXBlZFNwbGl0RGVsaW1pdGVyc2AgYWxsb3dpbmcgYG1hcmtkb3duLWl0LW1hdGhgIHRvIGJlIGB1c2VgJ2QgbXVsdGlwbGVcclxuICogICB0aW1lcyBsZWFkaW5nIHRvIG11bHRpcGxlIGlubGluZSBkZWxpbWl0ZXJzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VUYWJsZShvcHRpb25zOiBPcHRpb25zKSB7XHJcbiAgY29uc3Qgb3BlbkRlbGltcyA9IG9wdGlvbnMuaW5saW5lRGVsaW0ubWFwKChpKSA9PiBpWzBdKVxyXG4gIGNvbnN0IGNsb3NlRGVsaW1zID0gb3B0aW9ucy5pbmxpbmVEZWxpbS5tYXAoKGkpID0+IGlbMV0pXHJcblxyXG4gIG9wZW5EZWxpbXMudW5zaGlmdCgnYCcpXHJcbiAgY2xvc2VEZWxpbXMudW5zaGlmdCgnYCcpXHJcblxyXG4gIHJldHVybiB0YWJsZS5iaW5kKG51bGwsIG9wZW5EZWxpbXMsIGNsb3NlRGVsaW1zKVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE9wdGlvbnMge1xyXG4gIGlubGluZURlbGltOiBbW3N0cmluZywgc3RyaW5nXV1cclxuICBibG9ja0RlbGltOiBbW3N0cmluZywgc3RyaW5nXV1cclxufVxyXG4iXX0=