"use strict";
const specialChars = ['-', '+', '~', '=', '>'];
function isOpening(str, pos) {
    if (str[pos] === '{' &&
        specialChars.includes(str[pos + 1]) &&
        str[pos + 2] === str[pos + 1]) {
        const op = str.slice(pos + 1, pos + 3);
        const cl = op[0] === '>' ? '<<}' : op + '}';
        return [op, cl];
    }
    else {
        return null;
    }
}
function criticInline(state, silent) {
    const { src, pos } = state;
    const tags = isOpening(src, pos);
    if (tags === null)
        return false;
    const [opening, closing] = tags;
    const endPos = src.indexOf(closing, pos + 3);
    const content = endPos >= 0 ? src.slice(pos + 3, endPos) : null;
    if (content === null)
        return false;
    if (silent)
        return true;
    const token = state.push('critic-markup');
    token.content = content;
    token.tag = opening;
    state.pos = endPos + closing.length;
    return true;
}
function criticRender(tokens, idx) {
    const token = tokens[idx];
    const tag = token.tag;
    const content = token.content;
    if (tag === '--') {
        return `<del>${content}</del>`;
    }
    else if (tag === '++') {
        return `<ins>${content}</ins>`;
    }
    else if (tag === '==') {
        return `<mark>${content}</mark>`;
    }
    else if (tag === '>>') {
        return `<span tabindex="-1" class="critic comment"><span>${content}</span></span>`;
    }
    else {
        const arr = content.split('~>');
        if (arr.length === 2) {
            return `<del>${arr[0]}</del><ins>${arr[1]}</ins>`;
        }
        else {
            return `<code>Error: ~> not found.</code>`;
        }
    }
}
module.exports = function (md) {
    md.inline.ruler.before('strikethrough', 'critic-markup', criticInline);
    md.renderer.rules['critic-markup'] = criticRender;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFya2Rvd24taXQtY3JpdGljbWFya3VwL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFrQkEsTUFBTSxZQUFZLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFFOUMsU0FBUyxTQUFTLENBQUMsR0FBVyxFQUFFLEdBQVc7SUFDekMsSUFDRSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRztRQUNoQixZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbkMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUM3QjtRQUNBLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDdEMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFBO1FBQzNDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7S0FDaEI7U0FBTTtRQUNMLE9BQU8sSUFBSSxDQUFBO0tBQ1o7QUFDSCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQ25CLEtBQXdFLEVBQ3hFLE1BQWU7SUFFZixNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQTtJQUMxQixNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ2hDLElBQUksSUFBSSxLQUFLLElBQUk7UUFBRSxPQUFPLEtBQUssQ0FBQTtJQUMvQixNQUFNLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQTtJQUMvQixNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDNUMsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7SUFDL0QsSUFBSSxPQUFPLEtBQUssSUFBSTtRQUFFLE9BQU8sS0FBSyxDQUFBO0lBQ2xDLElBQUksTUFBTTtRQUFFLE9BQU8sSUFBSSxDQUFBO0lBQ3ZCLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUE7SUFDekMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7SUFDdkIsS0FBSyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUE7SUFDbkIsS0FBSyxDQUFDLEdBQUcsR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQTtJQUNuQyxPQUFPLElBQUksQ0FBQTtBQUNiLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxNQUFvQixFQUFFLEdBQVc7SUFDckQsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3pCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUE7SUFDckIsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQTtJQUM3QixJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDaEIsT0FBTyxRQUFRLE9BQU8sUUFBUSxDQUFBO0tBQy9CO1NBQU0sSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO1FBQ3ZCLE9BQU8sUUFBUSxPQUFPLFFBQVEsQ0FBQTtLQUMvQjtTQUFNLElBQUksR0FBRyxLQUFLLElBQUksRUFBRTtRQUN2QixPQUFPLFNBQVMsT0FBTyxTQUFTLENBQUE7S0FDakM7U0FBTSxJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDdkIsT0FBTyxvREFBb0QsT0FBTyxnQkFBZ0IsQ0FBQTtLQUNuRjtTQUFNO1FBRUwsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMvQixJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUE7U0FDbEQ7YUFBTTtZQUNMLE9BQU8sbUNBQW1DLENBQUE7U0FDM0M7S0FDRjtBQUNILENBQUM7QUFFRCxpQkFBUyxVQUFTLEVBQW1CO0lBQ25DLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsZUFBZSxFQUFFLFlBQW1CLENBQUMsQ0FBQTtJQUM3RSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsR0FBRyxZQUFZLENBQUE7QUFDbkQsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIGluY29ycG9yYXRlcyBjb2RlIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3dhZmVyLWxpL21hcmtkb3duLWl0LWNyaXRpY21hcmt1cFxyXG4vLyBjb3ZlcmVkIGJ5IHRoZSBmb2xsb3dpbmcgdGVybXM6XHJcbi8vIENvcHlyaWdodCAyMDE3IFdhZmVyIExpXHJcbi8vXHJcbi8vIFBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG4vLyBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQsIHByb3ZpZGVkIHRoYXQgdGhlIGFib3ZlXHJcbi8vIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2UgYXBwZWFyIGluIGFsbCBjb3BpZXMuXHJcbi8vXHJcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTXHJcbi8vIFdJVEggUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0ZcclxuLy8gTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZXHJcbi8vIFNQRUNJQUwsIERJUkVDVCwgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFU1xyXG4vLyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NIExPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OXHJcbi8vIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SIE9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU5cclxuLy8gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1IgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuXHJcbmltcG9ydCAqIGFzIG1kSXQgZnJvbSAnbWFya2Rvd24taXQnXHJcblxyXG5jb25zdCBzcGVjaWFsQ2hhcnMgPSBbJy0nLCAnKycsICd+JywgJz0nLCAnPiddXHJcblxyXG5mdW5jdGlvbiBpc09wZW5pbmcoc3RyOiBzdHJpbmcsIHBvczogbnVtYmVyKTogW3N0cmluZywgc3RyaW5nXSB8IG51bGwge1xyXG4gIGlmIChcclxuICAgIHN0cltwb3NdID09PSAneycgJiZcclxuICAgIHNwZWNpYWxDaGFycy5pbmNsdWRlcyhzdHJbcG9zICsgMV0pICYmXHJcbiAgICBzdHJbcG9zICsgMl0gPT09IHN0cltwb3MgKyAxXVxyXG4gICkge1xyXG4gICAgY29uc3Qgb3AgPSBzdHIuc2xpY2UocG9zICsgMSwgcG9zICsgMylcclxuICAgIGNvbnN0IGNsID0gb3BbMF0gPT09ICc+JyA/ICc8PH0nIDogb3AgKyAnfSdcclxuICAgIHJldHVybiBbb3AsIGNsXVxyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JpdGljSW5saW5lKFxyXG4gIHN0YXRlOiB7IHNyYzogc3RyaW5nOyBwb3M6IG51bWJlcjsgcHVzaDogKHRva2VuOiBzdHJpbmcpID0+IG1kSXQuVG9rZW4gfSxcclxuICBzaWxlbnQ6IGJvb2xlYW4sXHJcbikge1xyXG4gIGNvbnN0IHsgc3JjLCBwb3MgfSA9IHN0YXRlXHJcbiAgY29uc3QgdGFncyA9IGlzT3BlbmluZyhzcmMsIHBvcylcclxuICBpZiAodGFncyA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlXHJcbiAgY29uc3QgW29wZW5pbmcsIGNsb3NpbmddID0gdGFnc1xyXG4gIGNvbnN0IGVuZFBvcyA9IHNyYy5pbmRleE9mKGNsb3NpbmcsIHBvcyArIDMpXHJcbiAgY29uc3QgY29udGVudCA9IGVuZFBvcyA+PSAwID8gc3JjLnNsaWNlKHBvcyArIDMsIGVuZFBvcykgOiBudWxsXHJcbiAgaWYgKGNvbnRlbnQgPT09IG51bGwpIHJldHVybiBmYWxzZVxyXG4gIGlmIChzaWxlbnQpIHJldHVybiB0cnVlXHJcbiAgY29uc3QgdG9rZW4gPSBzdGF0ZS5wdXNoKCdjcml0aWMtbWFya3VwJylcclxuICB0b2tlbi5jb250ZW50ID0gY29udGVudFxyXG4gIHRva2VuLnRhZyA9IG9wZW5pbmdcclxuICBzdGF0ZS5wb3MgPSBlbmRQb3MgKyBjbG9zaW5nLmxlbmd0aFxyXG4gIHJldHVybiB0cnVlXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyaXRpY1JlbmRlcih0b2tlbnM6IG1kSXQuVG9rZW5bXSwgaWR4OiBudW1iZXIpIHtcclxuICBjb25zdCB0b2tlbiA9IHRva2Vuc1tpZHhdXHJcbiAgY29uc3QgdGFnID0gdG9rZW4udGFnXHJcbiAgY29uc3QgY29udGVudCA9IHRva2VuLmNvbnRlbnRcclxuICBpZiAodGFnID09PSAnLS0nKSB7XHJcbiAgICByZXR1cm4gYDxkZWw+JHtjb250ZW50fTwvZGVsPmBcclxuICB9IGVsc2UgaWYgKHRhZyA9PT0gJysrJykge1xyXG4gICAgcmV0dXJuIGA8aW5zPiR7Y29udGVudH08L2lucz5gXHJcbiAgfSBlbHNlIGlmICh0YWcgPT09ICc9PScpIHtcclxuICAgIHJldHVybiBgPG1hcms+JHtjb250ZW50fTwvbWFyaz5gXHJcbiAgfSBlbHNlIGlmICh0YWcgPT09ICc+PicpIHtcclxuICAgIHJldHVybiBgPHNwYW4gdGFiaW5kZXg9XCItMVwiIGNsYXNzPVwiY3JpdGljIGNvbW1lbnRcIj48c3Bhbj4ke2NvbnRlbnR9PC9zcGFuPjwvc3Bhbj5gXHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIHt+flt0ZXh0MV1+Plt0ZXh0Ml1+fn1cclxuICAgIGNvbnN0IGFyciA9IGNvbnRlbnQuc3BsaXQoJ34+JylcclxuICAgIGlmIChhcnIubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgIHJldHVybiBgPGRlbD4ke2FyclswXX08L2RlbD48aW5zPiR7YXJyWzFdfTwvaW5zPmBcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBgPGNvZGU+RXJyb3I6IH4+IG5vdCBmb3VuZC48L2NvZGU+YFxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0ID0gZnVuY3Rpb24obWQ6IG1kSXQuTWFya2Rvd25JdCkge1xyXG4gIG1kLmlubGluZS5ydWxlci5iZWZvcmUoJ3N0cmlrZXRocm91Z2gnLCAnY3JpdGljLW1hcmt1cCcsIGNyaXRpY0lubGluZSBhcyBhbnkpXHJcbiAgbWQucmVuZGVyZXIucnVsZXNbJ2NyaXRpYy1tYXJrdXAnXSA9IGNyaXRpY1JlbmRlclxyXG59XHJcbiJdfQ==