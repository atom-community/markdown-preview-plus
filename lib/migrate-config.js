"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function oldConfig() {
    return atom.config.get('markdown-preview-plus');
}
function unset(key) {
    atom.config.unset(`markdown-preview-plus.${key}`);
}
function migrate(oc, neww, old) {
    if (oc[old] != null) {
        atom.config.set(neww, oc[old]);
        unset(old);
        return true;
    }
    return false;
}
function migrateConfig() {
    const oc = oldConfig();
    const changes = [];
    if (oc.enablePandoc !== undefined) {
        atom.config.set('markdown-preview-plus.renderer', oc.enablePandoc ? 'pandoc' : 'markdown-it');
        unset('enablePandoc');
        changes.push(true);
    }
    changes.push(migrate(oc, 'markdown-preview-plus.markdownItConfig.breakOnSingleNewline', 'breakOnSingleNewline'), migrate(oc, 'markdown-preview-plus.previewConfig.liveUpdate', 'liveUpdate'), migrate(oc, 'markdown-preview-plus.previewConfig.previewSplitPaneDir', 'previewSplitPaneDir'), migrate(oc, 'markdown-preview-plus.previewConfig.previewDock', 'previewDock'), migrate(oc, 'markdown-preview-plus.previewConfig.closePreviewWithEditor', 'closePreviewWithEditor'), migrate(oc, 'markdown-preview-plus.previewConfig.activatePreviewWithEditor', 'activatePreviewWithEditor'), migrate(oc, 'markdown-preview-plus.syncConfig.syncPreviewOnChange', 'syncPreviewOnChange'), migrate(oc, 'markdown-preview-plus.syncConfig.syncPreviewOnEditorScroll', 'syncPreviewOnEditorScroll'), migrate(oc, 'markdown-preview-plus.syncConfig.syncEditorOnPreviewScroll', 'syncEditorOnPreviewScroll'), migrate(oc, 'markdown-preview-plus.mathConfig.enableLatexRenderingByDefault', 'enableLatexRenderingByDefault'), migrate(oc, 'markdown-preview-plus.mathConfig.latexRenderer', 'latexRenderer'), migrate(oc, 'markdown-preview-plus.mathConfig.numberEquations', 'numberEquations'), migrate(oc, 'markdown-preview-plus.markdownItConfig.useLazyHeaders', 'useLazyHeaders'), migrate(oc, 'markdown-preview-plus.markdownItConfig.useCheckBoxes', 'useCheckBoxes'), migrate(oc, 'markdown-preview-plus.markdownItConfig.useEmoji', 'useEmoji'), migrate(oc, 'markdown-preview-plus.markdownItConfig.useToc', 'useToc'), migrate(oc, 'markdown-preview-plus.markdownItConfig.inlineMathSeparators', 'inlineMathSeparators'), migrate(oc, 'markdown-preview-plus.markdownItConfig.blockMathSeparators', 'blockMathSeparators'), migrate(oc, 'markdown-preview-plus.pandocConfig.useNativePandocCodeStyles', 'useNativePandocCodeStyles'), migrate(oc, 'markdown-preview-plus.pandocConfig.pandocPath', 'pandocPath'), migrate(oc, 'markdown-preview-plus.pandocConfig.pandocFilters', 'pandocFilters'), migrate(oc, 'markdown-preview-plus.pandocConfig.pandocArguments', 'pandocArguments'), migrate(oc, 'markdown-preview-plus.pandocConfig.pandocMarkdownFlavor', 'pandocMarkdownFlavor'), migrate(oc, 'markdown-preview-plus.pandocConfig.pandocBibliography', 'pandocBibliography'), migrate(oc, 'markdown-preview-plus.pandocConfig.pandocRemoveReferences', 'pandocRemoveReferences'), migrate(oc, 'markdown-preview-plus.pandocConfig.pandocBIBFile', 'pandocBIBFile'), migrate(oc, 'markdown-preview-plus.pandocConfig.pandocBIBFileFallback', 'pandocBIBFileFallback'), migrate(oc, 'markdown-preview-plus.pandocConfig.pandocCSLFile', 'pandocCSLFile'), migrate(oc, 'markdown-preview-plus.pandocConfig.pandocCSLFileFallback', 'pandocCSLFileFallback'));
    return changes.some((x) => x === true);
}
exports.migrateConfig = migrateConfig;
//# sourceMappingURL=data:application/json;base64,