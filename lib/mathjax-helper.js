"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const CSON = require("season");
const fs = require("fs");
const util_1 = require("./util");
const mjAPI = require("mathjax-node");
let isMathJaxDisabled = false;
let isMathJaxLoaded = false;
async function mathProcessor(domElements) {
    if (isMathJaxDisabled)
        return;
    loadMathJax();
    for (const elem of domElements) {
        await processHTMLElement(elem);
    }
}
exports.mathProcessor = mathProcessor;
async function processHTMLString(html) {
    if (isMathJaxDisabled) {
        return html;
    }
    loadMathJax();
    const element = document.createElement('div');
    element.innerHTML = html;
    await processHTMLElement(element);
    return element.innerHTML;
}
exports.processHTMLString = processHTMLString;
async function processHTMLElement(element) {
    const maths = element.querySelectorAll('script[type^="math/tex"]');
    await Promise.all(Array.from(maths).map(async (math) => {
        try {
            const display = math.type
                .split(';')
                .some((x) => x.trim() === 'mode=display');
            const res = await mjAPI.typeset({
                svg: true,
                format: display ? 'TeX' : 'inline-TeX',
                math: math.text,
            });
            if (res.svg)
                math.outerHTML = res.svg;
        }
        catch (e) {
            console.error(e);
        }
    }));
}
function disableMathJax(disable) {
    isMathJaxDisabled = disable;
}
function loadMathJax(listener) {
    if (!isMathJaxLoaded) {
        isMathJaxLoaded = true;
        attachMathJax();
    }
    if (listener) {
        listener();
    }
}
function attachMathJax() {
    if (atom.inDevMode()) {
        atom.notifications.addInfo('Loading maths rendering engine MathJax');
    }
    configureMathJax();
}
function resetMathJax() {
    mjAPI.start();
}
exports.testing = {
    loadMathJax,
    resetMathJax,
    disableMathJax,
};
const namePattern = new RegExp(`\
^[^a-zA-Z\\d\\s]$\
|\
^[a-zA-Z]*$\
`);
function getUserMacrosPath() {
    const userMacrosPath = CSON.resolve(path.join(atom.getConfigDirPath(), 'markdown-preview-plus'));
    return userMacrosPath != null
        ? userMacrosPath
        : path.join(atom.getConfigDirPath(), 'markdown-preview-plus.cson');
}
function loadMacrosFile(filePath) {
    if (!CSON.isObjectPath(filePath)) {
        return {};
    }
    return CSON.readFileSync(filePath, function (error, object) {
        if (object === undefined) {
            object = {};
        }
        if (error !== undefined) {
            console.warn(`Error reading Latex Macros file '${filePath}': ${error.stack !== undefined ? error.stack : error}`);
            atom.notifications.addError(`Failed to load Latex Macros from '${filePath}'`, { detail: error.message, dismissable: true });
        }
        return object;
    });
}
function loadUserMacros() {
    const userMacrosPath = getUserMacrosPath();
    if (util_1.isFileSync(userMacrosPath)) {
        return loadMacrosFile(userMacrosPath);
    }
    else {
        console.debug('Creating markdown-preview-plus.cson, this is a one-time operation.');
        createMacrosTemplate(userMacrosPath);
        return loadMacrosFile(userMacrosPath);
    }
}
function createMacrosTemplate(filePath) {
    const templatePath = path.join(__dirname, '../assets/macros-template.cson');
    const templateFile = fs.readFileSync(templatePath, 'utf8');
    fs.writeFileSync(filePath, templateFile);
}
function checkMacros(macrosObject) {
    for (const name in macrosObject) {
        const value = macrosObject[name];
        if (!name.match(namePattern) || !valueMatchesPattern(value)) {
            delete macrosObject[name];
            atom.notifications.addError(`Failed to load LaTeX macro named '${name}'. Please see the [LaTeX guide](https://github.com/Galadirith/markdown-preview-plus/blob/master/LATEX.md#macro-names)`, { dismissable: true });
        }
    }
    return macrosObject;
}
function valueMatchesPattern(value) {
    if (Array.isArray(value)) {
        const macroDefinition = value[0];
        const numberOfArgs = value[1];
        if (typeof numberOfArgs === 'number') {
            return numberOfArgs % 1 === 0 && typeof macroDefinition === 'string';
        }
        else {
            return false;
        }
    }
    else if (typeof value === 'string') {
        return true;
    }
    else {
        return false;
    }
}
const configureMathJax = function () {
    let userMacros = loadUserMacros();
    if (userMacros) {
        userMacros = checkMacros(userMacros);
    }
    else {
        userMacros = {};
    }
    mjAPI.config({
        MathJax: {
            jax: ['input/TeX', 'output/SVG'],
            extensions: [],
            TeX: {
                extensions: [
                    'AMSmath.js',
                    'AMSsymbols.js',
                    'noErrors.js',
                    'noUndefined.js',
                ],
                Macros: userMacros,
            },
            messageStyle: 'none',
            showMathMenu: false,
        },
    });
    if (atom.inDevMode()) {
        atom.notifications.addSuccess('Loaded maths rendering engine MathJax');
    }
};
//# sourceMappingURL=data:application/json;base64,