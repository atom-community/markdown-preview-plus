"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const CP = require("child_process");
const fs = require("fs");
const path = require("path");
const util_1 = require("./util");
const getMathJaxPath = (function () {
    let cached = null;
    return function () {
        if (cached !== null) {
            return cached;
        }
        try {
            return (cached = require.resolve('mathjax'));
        }
        catch (e) {
            return '';
        }
    };
})();
function findFileRecursive(filePath, fileName) {
    const bibFile = path.join(filePath, '../', fileName);
    if (fs.existsSync(bibFile)) {
        return bibFile;
    }
    else {
        const newPath = path.join(bibFile, '..');
        if (newPath !== filePath && !_.includes(atom.project.getPaths(), newPath)) {
            return findFileRecursive(newPath, fileName);
        }
        else {
            return false;
        }
    }
}
function setPandocOptions(filePath, renderMath) {
    const opts = { maxBuffer: Infinity };
    if (filePath !== undefined) {
        opts.cwd = path.dirname(filePath);
    }
    const mathjaxPath = getMathJaxPath();
    const config = util_1.atomConfig().pandocConfig;
    const args = {
        from: config.pandocMarkdownFlavor,
        to: 'html',
        mathjax: renderMath ? mathjaxPath : undefined,
        filter: config.pandocFilters,
    };
    if (config.pandocBibliography) {
        args.filter.push('pandoc-citeproc');
        let bibFile = filePath && findFileRecursive(filePath, config.pandocBIBFile);
        if (!bibFile) {
            bibFile = config.pandocBIBFileFallback;
        }
        args.bibliography = bibFile ? bibFile : undefined;
        let cslFile = filePath && findFileRecursive(filePath, config.pandocCSLFile);
        if (!cslFile) {
            cslFile = config.pandocCSLFileFallback;
        }
        args.csl = cslFile ? cslFile : undefined;
    }
    return { args, opts };
}
function handleError(error, html, renderMath) {
    const err = new Error(error);
    err.html = handleSuccess(html, renderMath);
    throw err;
}
function handleMath(html) {
    const doc = document.createElement('div');
    doc.innerHTML = html;
    doc.querySelectorAll('.math').forEach(function (elem) {
        let math = elem.innerText;
        const mode = math.indexOf('\\[') > -1 ? '; mode=display' : '';
        math = math.replace(/\\[[()\]]/g, '');
        return (elem.outerHTML =
            '<span class="math">' +
                `<script type='math/tex${mode}'>${math}</script>` +
                '</span>');
    });
    return doc.innerHTML;
}
function removeReferences(html) {
    const doc = document.createElement('div');
    doc.innerHTML = html;
    doc.querySelectorAll('.references').forEach((elem) => {
        elem.remove();
    });
    return doc.innerHTML;
}
function handleSuccess(html, renderMath) {
    if (renderMath) {
        html = handleMath(html);
    }
    if (util_1.atomConfig().pandocConfig.pandocRemoveReferences) {
        html = removeReferences(html);
    }
    return html;
}
function handleResponse(error, html, renderMath) {
    if (error) {
        return handleError(error, html, renderMath);
    }
    else {
        return handleSuccess(html, renderMath);
    }
}
async function renderPandoc(text, filePath, renderMath) {
    const { args, opts } = setPandocOptions(filePath, renderMath);
    return new Promise((resolve, reject) => {
        const cp = CP.execFile(util_1.atomConfig().pandocConfig.pandocPath, getArguments(args), opts, function (error, stdout, stderr) {
            if (error) {
                atom.notifications.addError(error.toString(), {
                    stack: error.stack,
                    dismissable: true,
                });
                reject(error);
            }
            try {
                const result = handleResponse(stderr || '', stdout || '', renderMath);
                resolve(result);
            }
            catch (e) {
                reject(e);
            }
        });
        cp.stdin.write(text);
        cp.stdin.end();
    });
}
exports.renderPandoc = renderPandoc;
function getArguments(iargs) {
    const args = _.reduce(iargs, function (res, val, key) {
        if (val && !_.isEmpty(val)) {
            const nval = _.flatten([val]);
            _.forEach(nval, function (v) {
                if (!_.isEmpty(v)) {
                    res.push(`--${key}=${v}`);
                }
            });
        }
        return res;
    }, []);
    const res = [];
    for (const val of [...args, ...util_1.atomConfig().pandocConfig.pandocArguments]) {
        const newval = val.replace(/^(--[\w\-]+)\s(.+)$/i, '$1=$2');
        if (newval.substr(0, 1) === '-') {
            res.push(newval);
        }
    }
    return res;
}
exports.testing = {
    setPandocOptions,
    getArguments,
    findFileRecursive,
};
//# sourceMappingURL=data:application/json;base64,