"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CP = require("child_process");
const fs = require("fs");
const path = require("path");
const util_1 = require("./util");
const getMathJaxPath = (function () {
    let cached = null;
    return function () {
        if (cached !== null) {
            return cached;
        }
        try {
            return (cached = require.resolve('mathjax'));
        }
        catch (e) {
            return '';
        }
    };
})();
function findFileRecursive(filePath, fileName) {
    const bibFile = path.join(filePath, '../', fileName);
    if (fs.existsSync(bibFile)) {
        return bibFile;
    }
    else {
        const newPath = path.join(bibFile, '..');
        if (newPath !== filePath && !atom.project.getPaths().includes(newPath)) {
            return findFileRecursive(newPath, fileName);
        }
        else {
            return false;
        }
    }
}
function setPandocOptions(filePath, renderMath) {
    const opts = { maxBuffer: Infinity };
    if (filePath !== undefined) {
        opts.cwd = path.dirname(filePath);
    }
    const mathjaxPath = getMathJaxPath();
    const config = util_1.atomConfig().pandocConfig;
    const args = {
        from: config.pandocMarkdownFlavor,
        to: 'html',
        mathjax: renderMath ? mathjaxPath : undefined,
        filter: config.pandocFilters,
    };
    if (config.pandocBibliography) {
        args.filter.push('pandoc-citeproc');
        let bibFile = filePath && findFileRecursive(filePath, config.pandocBIBFile);
        if (!bibFile) {
            bibFile = config.pandocBIBFileFallback;
        }
        args.bibliography = bibFile ? bibFile : undefined;
        let cslFile = filePath && findFileRecursive(filePath, config.pandocCSLFile);
        if (!cslFile) {
            cslFile = config.pandocCSLFileFallback;
        }
        args.csl = cslFile ? cslFile : undefined;
    }
    return { args, opts };
}
function handleError(error, html, renderMath) {
    const err = new Error(error);
    err.html = handleSuccess(html, renderMath);
    throw err;
}
function handleMath(html) {
    const doc = document.createElement('div');
    doc.innerHTML = html;
    doc.querySelectorAll('.math').forEach(function (elem) {
        let math = elem.innerText;
        const mode = math.indexOf('\\[') > -1 ? '; mode=display' : '';
        math = math.replace(/\\[[()\]]/g, '');
        return (elem.outerHTML =
            '<span class="math">' +
                `<script type='math/tex${mode}'>${math}</script>` +
                '</span>');
    });
    return doc.innerHTML;
}
function removeReferences(html) {
    const doc = document.createElement('div');
    doc.innerHTML = html;
    doc.querySelectorAll('.references').forEach((elem) => {
        elem.remove();
    });
    return doc.innerHTML;
}
function handleSuccess(html, renderMath) {
    if (renderMath) {
        html = handleMath(html);
    }
    if (util_1.atomConfig().pandocConfig.pandocRemoveReferences) {
        html = removeReferences(html);
    }
    return html;
}
function handleResponse(error, html, renderMath) {
    if (error) {
        return handleError(error, html, renderMath);
    }
    else {
        return handleSuccess(html, renderMath);
    }
}
async function renderPandoc(text, filePath, renderMath) {
    const { args, opts } = setPandocOptions(filePath, renderMath);
    return new Promise((resolve, reject) => {
        const cp = CP.execFile(util_1.atomConfig().pandocConfig.pandocPath, getArguments(args), opts, function (error, stdout, stderr) {
            if (error) {
                atom.notifications.addError(error.toString(), {
                    stack: error.stack,
                    dismissable: true,
                });
                reject(error);
            }
            try {
                const result = handleResponse(stderr || '', stdout || '', renderMath);
                resolve(result);
            }
            catch (e) {
                reject(e);
            }
        });
        cp.stdin.write(text);
        cp.stdin.end();
    });
}
exports.renderPandoc = renderPandoc;
function getArguments(iargs) {
    const args = [];
    for (const [key, val] of Object.entries(iargs)) {
        if (Array.isArray(val)) {
            args.push(...val.map((v) => `--${key}=${v}`));
        }
        else if (val) {
            args.push(`--${key}=${val}`);
        }
    }
    const res = [];
    for (const val of [...args, ...util_1.atomConfig().pandocConfig.pandocArguments]) {
        const newval = val.replace(/^(--[\w\-]+)\s(.+)$/i, '$1=$2');
        if (newval.substr(0, 1) === '-') {
            res.push(newval);
        }
    }
    return res;
}
exports.testing = {
    setPandocOptions,
    getArguments,
    findFileRecursive,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZG9jLWhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wYW5kb2MtaGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0NBQW9DO0FBQ3BDLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IsaUNBQW1DO0FBS25DLE1BQU0sY0FBYyxHQUFHLENBQUM7SUFDdEIsSUFBSSxNQUFNLEdBQWtCLElBQUksQ0FBQTtJQUNoQyxPQUFPO1FBQ0wsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQ25CLE9BQU8sTUFBTSxDQUFBO1NBQ2Q7UUFDRCxJQUFJO1lBQ0YsT0FBTyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7U0FDN0M7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE9BQU8sRUFBRSxDQUFBO1NBQ1Y7SUFDSCxDQUFDLENBQUE7QUFDSCxDQUFDLENBQUMsRUFBRSxDQUFBO0FBRUosU0FBUyxpQkFBaUIsQ0FBQyxRQUFnQixFQUFFLFFBQWdCO0lBQzNELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNwRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDMUIsT0FBTyxPQUFPLENBQUE7S0FDZjtTQUFNO1FBQ0wsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDeEMsSUFBSSxPQUFPLEtBQUssUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDdEUsT0FBTyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUE7U0FDNUM7YUFBTTtZQUNMLE9BQU8sS0FBSyxDQUFBO1NBQ2I7S0FD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QyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1NBQzlDO2FBQU0sSUFBSSxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUE7U0FDN0I7S0FDRjtJQUNELE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQTtJQUN4QixLQUFLLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUUsR0FBRyxpQkFBVSxFQUFFLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxFQUFFO1FBQ3pFLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDM0QsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDL0IsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtTQUNqQjtLQUNGO0lBQ0QsT0FBTyxHQUFHLENBQUE7QUFDWixDQUFDO0FBRVksUUFBQSxPQUFPLEdBQUc7SUFDckIsZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixpQkFBaUI7Q0FDbEIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDUCA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKVxyXG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcycpXHJcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXHJcbmltcG9ydCB7IGF0b21Db25maWcgfSBmcm9tICcuL3V0aWwnXHJcblxyXG4vKipcclxuICogU2V0cyBsb2NhbCBtYXRoamF4UGF0aCBpZiBhdmFpbGFibGVcclxuICovXHJcbmNvbnN0IGdldE1hdGhKYXhQYXRoID0gKGZ1bmN0aW9uKCkge1xyXG4gIGxldCBjYWNoZWQ6IHN0cmluZyB8IG51bGwgPSBudWxsXHJcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKGNhY2hlZCAhPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gY2FjaGVkXHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gKGNhY2hlZCA9IHJlcXVpcmUucmVzb2x2ZSgnbWF0aGpheCcpKVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICByZXR1cm4gJydcclxuICAgIH1cclxuICB9XHJcbn0pKClcclxuXHJcbmZ1bmN0aW9uIGZpbmRGaWxlUmVjdXJzaXZlKGZpbGVQYXRoOiBzdHJpbmcsIGZpbGVOYW1lOiBzdHJpbmcpOiBzdHJpbmcgfCBmYWxzZSB7XHJcbiAgY29uc3QgYmliRmlsZSA9IHBhdGguam9pbihmaWxlUGF0aCwgJy4uLycsIGZpbGVOYW1lKVxyXG4gIGlmIChmcy5leGlzdHNTeW5jKGJpYkZpbGUpKSB7XHJcbiAgICByZXR1cm4gYmliRmlsZVxyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBuZXdQYXRoID0gcGF0aC5qb2luKGJpYkZpbGUsICcuLicpXHJcbiAgICBpZiAobmV3UGF0aCAhPT0gZmlsZVBhdGggJiYgIWF0b20ucHJvamVjdC5nZXRQYXRocygpLmluY2x1ZGVzKG5ld1BhdGgpKSB7XHJcbiAgICAgIHJldHVybiBmaW5kRmlsZVJlY3Vyc2l2ZShuZXdQYXRoLCBmaWxlTmFtZSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy8gZXhwb3J0ZWQgZm9yIHRlc3RzXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXJncyB7XHJcbiAgZnJvbTogc3RyaW5nXHJcbiAgdG86ICdodG1sJ1xyXG4gIG1hdGhqYXg/OiBzdHJpbmdcclxuICBmaWx0ZXI6IHN0cmluZ1tdXHJcbiAgYmlibGlvZ3JhcGh5Pzogc3RyaW5nXHJcbiAgY3NsPzogc3RyaW5nXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFBhbmRvY09wdGlvbnMoZmlsZVBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZCwgcmVuZGVyTWF0aDogYm9vbGVhbikge1xyXG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXRvbS1jb21tdW5pdHkvbWFya2Rvd24tcHJldmlldy1wbHVzL2lzc3Vlcy8zMTZcclxuICBjb25zdCBvcHRzOiBDUC5FeGVjRmlsZU9wdGlvbnMgPSB7IG1heEJ1ZmZlcjogSW5maW5pdHkgfVxyXG4gIGlmIChmaWxlUGF0aCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBvcHRzLmN3ZCA9IHBhdGguZGlybmFtZShmaWxlUGF0aClcclxuICB9XHJcbiAgY29uc3QgbWF0aGpheFBhdGggPSBnZXRNYXRoSmF4UGF0aCgpXHJcbiAgY29uc3QgY29uZmlnID0gYXRvbUNvbmZpZygpLnBhbmRvY0NvbmZpZ1xyXG4gIGNvbnN0IGFyZ3M6IEFyZ3MgPSB7XHJcbiAgICBmcm9tOiBjb25maWcucGFuZG9jTWFya2Rvd25GbGF2b3IsXHJcbiAgICB0bzogJ2h0bWwnLFxyXG4gICAgbWF0aGpheDogcmVuZGVyTWF0aCA/IG1hdGhqYXhQYXRoIDogdW5kZWZpbmVkLFxyXG4gICAgZmlsdGVyOiBjb25maWcucGFuZG9jRmlsdGVycyxcclxuICB9XHJcbiAgaWYgKGNvbmZpZy5wYW5kb2NCaWJsaW9ncmFwaHkpIHtcclxuICAgIGFyZ3MuZmlsdGVyLnB1c2goJ3BhbmRvYy1jaXRlcHJvYycpXHJcbiAgICBsZXQgYmliRmlsZSA9IGZpbGVQYXRoICYmIGZpbmRGaWxlUmVjdXJzaXZlKGZpbGVQYXRoLCBjb25maWcucGFuZG9jQklCRmlsZSlcclxuICAgIGlmICghYmliRmlsZSkge1xyXG4gICAgICBiaWJGaWxlID0gY29uZmlnLnBhbmRvY0JJQkZpbGVGYWxsYmFja1xyXG4gICAgfVxyXG4gICAgYXJncy5iaWJsaW9ncmFwaHkgPSBiaWJGaWxlID8gYmliRmlsZSA6IHVuZGVmaW5lZFxyXG4gICAgbGV0IGNzbEZpbGUgPSBmaWxlUGF0aCAmJiBmaW5kRmlsZVJlY3Vyc2l2ZShmaWxlUGF0aCwgY29uZmlnLnBhbmRvY0NTTEZpbGUpXHJcbiAgICBpZiAoIWNzbEZpbGUpIHtcclxuICAgICAgY3NsRmlsZSA9IGNvbmZpZy5wYW5kb2NDU0xGaWxlRmFsbGJhY2tcclxuICAgIH1cclxuICAgIGFyZ3MuY3NsID0gY3NsRmlsZSA/IGNzbEZpbGUgOiB1bmRlZmluZWRcclxuICB9XHJcbiAgcmV0dXJuIHsgYXJncywgb3B0cyB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIYW5kbGUgZXJyb3IgcmVzcG9uc2UgZnJvbSBQYW5kb2NcclxuICogQHBhcmFtIHtlcnJvcn0gUmV0dXJuZWQgZXJyb3JcclxuICogQHBhcmFtIHtzdHJpbmd9IFJldHVybmVkIEhUTUxcclxuICogQHJldHVybiB7YXJyYXl9IHdpdGggQXJndW1lbnRzIGZvciBjYWxsYmFja0Z1bmN0aW9uIChlcnJvciBzZXQgdG8gbnVsbClcclxuICovXHJcbmZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycm9yOiBzdHJpbmcsIGh0bWw6IHN0cmluZywgcmVuZGVyTWF0aDogYm9vbGVhbik6IG5ldmVyIHtcclxuICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoZXJyb3IpIGFzIEVycm9yICYgeyBodG1sOiBzdHJpbmcgfVxyXG4gIGVyci5odG1sID0gaGFuZGxlU3VjY2VzcyhodG1sLCByZW5kZXJNYXRoKVxyXG4gIHRocm93IGVyclxyXG59XHJcblxyXG4vKipcclxuICogQWRqdXN0cyBhbGwgbWF0aCBlbnZpcm9ubWVudHMgaW4gSFRNTFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gSFRNTCB0byBiZSBhZGp1c3RlZFxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEhUTUwgd2l0aCBhZGp1c3RlZCBtYXRoIGVudmlyb25tZW50c1xyXG4gKi9cclxuZnVuY3Rpb24gaGFuZGxlTWF0aChodG1sOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIGNvbnN0IGRvYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbiAgZG9jLmlubmVySFRNTCA9IGh0bWxcclxuICBkb2MucXVlcnlTZWxlY3RvckFsbCgnLm1hdGgnKS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW0pIHtcclxuICAgIGxldCBtYXRoID0gKGVsZW0gYXMgSFRNTEVsZW1lbnQpLmlubmVyVGV4dFxyXG4gICAgLy8gU2V0IG1vZGUgaWYgaXQgaXMgYmxvY2sgbWF0aFxyXG4gICAgY29uc3QgbW9kZSA9IG1hdGguaW5kZXhPZignXFxcXFsnKSA+IC0xID8gJzsgbW9kZT1kaXNwbGF5JyA6ICcnXHJcblxyXG4gICAgLy8gUmVtb3ZlIHNvdXJyb3VuZGluZyBcXFsgXFxdIGFuZCBcXCggXFwpXHJcbiAgICBtYXRoID0gbWF0aC5yZXBsYWNlKC9cXFxcW1soKVxcXV0vZywgJycpXHJcbiAgICByZXR1cm4gKGVsZW0ub3V0ZXJIVE1MID1cclxuICAgICAgJzxzcGFuIGNsYXNzPVwibWF0aFwiPicgK1xyXG4gICAgICBgPHNjcmlwdCB0eXBlPSdtYXRoL3RleCR7bW9kZX0nPiR7bWF0aH08L3NjcmlwdD5gICtcclxuICAgICAgJzwvc3Bhbj4nKVxyXG4gIH0pXHJcblxyXG4gIHJldHVybiBkb2MuaW5uZXJIVE1MXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZVJlZmVyZW5jZXMoaHRtbDogc3RyaW5nKSB7XHJcbiAgY29uc3QgZG9jID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcclxuICBkb2MuaW5uZXJIVE1MID0gaHRtbFxyXG4gIGRvYy5xdWVyeVNlbGVjdG9yQWxsKCcucmVmZXJlbmNlcycpLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgIGVsZW0ucmVtb3ZlKClcclxuICB9KVxyXG4gIHJldHVybiBkb2MuaW5uZXJIVE1MXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIYW5kbGUgc3VjY2Vzc2Z1bCByZXNwb25zZSBmcm9tIFBhbmRvY1xyXG4gKiBAcGFyYW0gUmV0dXJuZWQgSFRNTFxyXG4gKiBAcmV0dXJuIFBvc3NpYmx5IG1vZGlmaWVkIHJldHVybmVkIEhUTUxcclxuICovXHJcbmZ1bmN0aW9uIGhhbmRsZVN1Y2Nlc3MoaHRtbDogc3RyaW5nLCByZW5kZXJNYXRoOiBib29sZWFuKTogc3RyaW5nIHtcclxuICBpZiAocmVuZGVyTWF0aCkge1xyXG4gICAgaHRtbCA9IGhhbmRsZU1hdGgoaHRtbClcclxuICB9XHJcbiAgaWYgKGF0b21Db25maWcoKS5wYW5kb2NDb25maWcucGFuZG9jUmVtb3ZlUmVmZXJlbmNlcykge1xyXG4gICAgaHRtbCA9IHJlbW92ZVJlZmVyZW5jZXMoaHRtbClcclxuICB9XHJcbiAgcmV0dXJuIGh0bWxcclxufVxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZSByZXNwb25zZSBmcm9tIFBhbmRvY1xyXG4gKiBAcGFyYW0ge09iamVjdH0gZXJyb3IgaWYgdGhyb3duXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBSZXR1cm5lZCBIVE1MXHJcbiAqL1xyXG5mdW5jdGlvbiBoYW5kbGVSZXNwb25zZShlcnJvcjogc3RyaW5nLCBodG1sOiBzdHJpbmcsIHJlbmRlck1hdGg6IGJvb2xlYW4pIHtcclxuICBpZiAoZXJyb3IpIHtcclxuICAgIHJldHVybiBoYW5kbGVFcnJvcihlcnJvciwgaHRtbCwgcmVuZGVyTWF0aClcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIGhhbmRsZVN1Y2Nlc3MoaHRtbCwgcmVuZGVyTWF0aClcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZW5kZXJzIG1hcmtkb3duIHdpdGggcGFuZG9jXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBkb2N1bWVudCBpbiBtYXJrZG93blxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHdoZXRoZXIgdG8gcmVuZGVyIHRoZSBtYXRoIHdpdGggbWF0aGpheFxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja0Z1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVuZGVyUGFuZG9jKFxyXG4gIHRleHQ6IHN0cmluZyxcclxuICBmaWxlUGF0aDogc3RyaW5nIHwgdW5kZWZpbmVkLFxyXG4gIHJlbmRlck1hdGg6IGJvb2xlYW4sXHJcbik6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgY29uc3QgeyBhcmdzLCBvcHRzIH0gPSBzZXRQYW5kb2NPcHRpb25zKGZpbGVQYXRoLCByZW5kZXJNYXRoKVxyXG4gIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGNvbnN0IGNwID0gQ1AuZXhlY0ZpbGUoXHJcbiAgICAgIGF0b21Db25maWcoKS5wYW5kb2NDb25maWcucGFuZG9jUGF0aCxcclxuICAgICAgZ2V0QXJndW1lbnRzKGFyZ3MpLFxyXG4gICAgICBvcHRzLFxyXG4gICAgICBmdW5jdGlvbihlcnJvciwgc3Rkb3V0LCBzdGRlcnIpIHtcclxuICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihlcnJvci50b1N0cmluZygpLCB7XHJcbiAgICAgICAgICAgIHN0YWNrOiBlcnJvci5zdGFjayxcclxuICAgICAgICAgICAgZGlzbWlzc2FibGU6IHRydWUsXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgcmVqZWN0KGVycm9yKVxyXG4gICAgICAgIH1cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gaGFuZGxlUmVzcG9uc2Uoc3RkZXJyIHx8ICcnLCBzdGRvdXQgfHwgJycsIHJlbmRlck1hdGgpXHJcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdClcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICByZWplY3QoZSlcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICApXHJcbiAgICBjcC5zdGRpbi53cml0ZSh0ZXh0KVxyXG4gICAgY3Auc3RkaW4uZW5kKClcclxuICB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRBcmd1bWVudHMoaWFyZ3M6IEFyZ3MpIHtcclxuICBjb25zdCBhcmdzOiBzdHJpbmdbXSA9IFtdXHJcbiAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGlhcmdzKSkge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xyXG4gICAgICBhcmdzLnB1c2goLi4udmFsLm1hcCgodikgPT4gYC0tJHtrZXl9PSR7dn1gKSlcclxuICAgIH0gZWxzZSBpZiAodmFsKSB7XHJcbiAgICAgIGFyZ3MucHVzaChgLS0ke2tleX09JHt2YWx9YClcclxuICAgIH1cclxuICB9XHJcbiAgY29uc3QgcmVzOiBzdHJpbmdbXSA9IFtdXHJcbiAgZm9yIChjb25zdCB2YWwgb2YgWy4uLmFyZ3MsIC4uLmF0b21Db25maWcoKS5wYW5kb2NDb25maWcucGFuZG9jQXJndW1lbnRzXSkge1xyXG4gICAgY29uc3QgbmV3dmFsID0gdmFsLnJlcGxhY2UoL14oLS1bXFx3XFwtXSspXFxzKC4rKSQvaSwgJyQxPSQyJylcclxuICAgIGlmIChuZXd2YWwuc3Vic3RyKDAsIDEpID09PSAnLScpIHtcclxuICAgICAgcmVzLnB1c2gobmV3dmFsKVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gcmVzXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB0ZXN0aW5nID0ge1xyXG4gIHNldFBhbmRvY09wdGlvbnMsXHJcbiAgZ2V0QXJndW1lbnRzLFxyXG4gIGZpbmRGaWxlUmVjdXJzaXZlLFxyXG59XHJcbiJdfQ==