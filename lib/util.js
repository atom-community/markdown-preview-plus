"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function handlePromise(promise) {
    if (!promise)
        return;
    promise.catch((error) => {
        console.error(error);
        atom.notifications.addFatalError(error.toString(), {
            detail: error.message,
            stack: error.stack,
            dismissable: true,
        });
    });
}
exports.handlePromise = handlePromise;
const fs_1 = require("fs");
function isFileSync(filePath) {
    if (!fs_1.existsSync(filePath))
        return false;
    return fs_1.lstatSync(filePath).isFile();
}
exports.isFileSync = isFileSync;
function pairUp(arr, option) {
    if (arr.length % 2 !== 0) {
        atom.notifications.addWarning(`Invalid math delimiter configuration${option ? `in ${option}` : ''}`, {
            detail: `Expected even number of elements, but got "${arr.join(', ')}"`,
            dismissable: true,
        });
    }
    return arr.reduce(function (result, _value, index, array) {
        if (index % 2 === 0)
            result.push([array[index], array[index + 1]]);
        return result;
    }, []);
}
exports.pairUp = pairUp;
function isElement(node) {
    return node.nodeType === Node.ELEMENT_NODE;
}
exports.isElement = isElement;
const webview_handler_1 = require("./markdown-preview-view/webview-handler");
const renderer = require("./renderer");
async function copyHtml(text, filePath, renderLaTeX) {
    const view = new webview_handler_1.WebviewHandler(async () => {
        view.init(atom.getConfigDirPath(), atomConfig().mathConfig, 'SVG');
        view.setBasePath(filePath);
        const domDocument = await renderer.render({
            text,
            filePath,
            renderLaTeX,
            mode: 'copy',
        });
        const res = await view.update(domDocument.documentElement.outerHTML, renderLaTeX);
        if (res) {
            if (atom.config.get('markdown-preview-plus.richClipboard')) {
                const clipboard = await Promise.resolve().then(() => require('./clipboard'));
                clipboard.write({ text: res, html: res });
            }
            else {
                atom.clipboard.write(res);
            }
        }
        view.destroy();
    });
    view.element.style.pointerEvents = 'none';
    view.element.style.position = 'absolute';
    view.element.style.width = '0px';
    view.element.style.height = '0px';
    const ws = atom.views.getView(atom.workspace);
    ws.appendChild(view.element);
}
exports.copyHtml = copyHtml;
function atomConfig() {
    return atom.config.get('markdown-preview-plus');
}
exports.atomConfig = atomConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsU0FBZ0IsYUFBYSxDQUFDLE9BQXFCO0lBQ2pELElBQUksQ0FBQyxPQUFPO1FBQUUsT0FBTTtJQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBWSxFQUFFLEVBQUU7UUFDN0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNwQixJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDakQsTUFBTSxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3JCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixXQUFXLEVBQUUsSUFBSTtTQUNsQixDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFWRCxzQ0FVQztBQUNELDJCQUEwQztBQUMxQyxTQUFnQixVQUFVLENBQUMsUUFBZ0I7SUFDekMsSUFBSSxDQUFDLGVBQVUsQ0FBQyxRQUFRLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQTtJQUN2QyxPQUFPLGNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQUNyQyxDQUFDO0FBSEQsZ0NBR0M7QUFFRCxTQUFnQixNQUFNLENBQUksR0FBUSxFQUFFLE1BQWU7SUFDakQsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDeEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQzNCLHVDQUF1QyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUNyRTtZQUNFLE1BQU0sRUFBRSw4Q0FBOEMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRztZQUN2RSxXQUFXLEVBQUUsSUFBSTtTQUNsQixDQUNGLENBQUE7S0FDRjtJQUNELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBZ0IsVUFBUyxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQ3BFLElBQUksS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNsRSxPQUFPLE1BQU0sQ0FBQTtJQUNmLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUNSLENBQUM7QUFkRCx3QkFjQztBQUVELFNBQWdCLFNBQVMsQ0FBQyxJQUFVO0lBQ2xDLE9BQU8sSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFBO0FBQzVDLENBQUM7QUFGRCw4QkFFQztBQUVELDZFQUF3RTtBQUN4RSx1Q0FBc0M7QUFDL0IsS0FBSyxVQUFVLFFBQVEsQ0FDNUIsSUFBWSxFQUNaLFFBQTRCLEVBQzVCLFdBQW9CO0lBRXBCLE1BQU0sSUFBSSxHQUFHLElBQUksZ0NBQWMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUNsRSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBRTFCLE1BQU0sV0FBVyxHQUFHLE1BQU0sUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUN4QyxJQUFJO1lBQ0osUUFBUTtZQUNSLFdBQVc7WUFDWCxJQUFJLEVBQUUsTUFBTTtTQUNiLENBQUMsQ0FBQTtRQUNGLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FDM0IsV0FBVyxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQ3JDLFdBQVcsQ0FDWixDQUFBO1FBQ0QsSUFBSSxHQUFHLEVBQUU7WUFDUCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDLEVBQUU7Z0JBQzFELE1BQU0sU0FBUyxHQUFHLDJDQUFhLGFBQWEsRUFBQyxDQUFBO2dCQUM3QyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTthQUMxQztpQkFBTTtnQkFDTCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTthQUMxQjtTQUNGO1FBQ0QsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ2hCLENBQUMsQ0FBQyxDQUFBO0lBQ0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQTtJQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFBO0lBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7SUFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQTtJQUNqQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDN0MsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDOUIsQ0FBQztBQW5DRCw0QkFtQ0M7QUFFRCxTQUFnQixVQUFVO0lBQ3hCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtBQUNqRCxDQUFDO0FBRkQsZ0NBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaGFuZGxlUHJvbWlzZShwcm9taXNlOiBQcm9taXNlPGFueT4pOiB2b2lkIHtcclxuICBpZiAoIXByb21pc2UpIHJldHVyblxyXG4gIHByb21pc2UuY2F0Y2goKGVycm9yOiBFcnJvcikgPT4ge1xyXG4gICAgY29uc29sZS5lcnJvcihlcnJvcilcclxuICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRGYXRhbEVycm9yKGVycm9yLnRvU3RyaW5nKCksIHtcclxuICAgICAgZGV0YWlsOiBlcnJvci5tZXNzYWdlLFxyXG4gICAgICBzdGFjazogZXJyb3Iuc3RhY2ssXHJcbiAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxyXG4gICAgfSlcclxuICB9KVxyXG59XHJcbmltcG9ydCB7IGxzdGF0U3luYywgZXhpc3RzU3luYyB9IGZyb20gJ2ZzJ1xyXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlU3luYyhmaWxlUGF0aDogc3RyaW5nKSB7XHJcbiAgaWYgKCFleGlzdHNTeW5jKGZpbGVQYXRoKSkgcmV0dXJuIGZhbHNlXHJcbiAgcmV0dXJuIGxzdGF0U3luYyhmaWxlUGF0aCkuaXNGaWxlKClcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhaXJVcDxUPihhcnI6IFRbXSwgb3B0aW9uPzogc3RyaW5nKTogQXJyYXk8W1QsIFRdPiB7XHJcbiAgaWYgKGFyci5sZW5ndGggJSAyICE9PSAwKSB7XHJcbiAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkV2FybmluZyhcclxuICAgICAgYEludmFsaWQgbWF0aCBkZWxpbWl0ZXIgY29uZmlndXJhdGlvbiR7b3B0aW9uID8gYGluICR7b3B0aW9ufWAgOiAnJ31gLFxyXG4gICAgICB7XHJcbiAgICAgICAgZGV0YWlsOiBgRXhwZWN0ZWQgZXZlbiBudW1iZXIgb2YgZWxlbWVudHMsIGJ1dCBnb3QgXCIke2Fyci5qb2luKCcsICcpfVwiYCxcclxuICAgICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgIClcclxuICB9XHJcbiAgcmV0dXJuIGFyci5yZWR1Y2U8QXJyYXk8W1QsIFRdPj4oZnVuY3Rpb24ocmVzdWx0LCBfdmFsdWUsIGluZGV4LCBhcnJheSkge1xyXG4gICAgaWYgKGluZGV4ICUgMiA9PT0gMCkgcmVzdWx0LnB1c2goW2FycmF5W2luZGV4XSwgYXJyYXlbaW5kZXggKyAxXV0pXHJcbiAgICByZXR1cm4gcmVzdWx0XHJcbiAgfSwgW10pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0VsZW1lbnQobm9kZTogTm9kZSk6IG5vZGUgaXMgRWxlbWVudCB7XHJcbiAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFXHJcbn1cclxuXHJcbmltcG9ydCB7IFdlYnZpZXdIYW5kbGVyIH0gZnJvbSAnLi9tYXJrZG93bi1wcmV2aWV3LXZpZXcvd2Vidmlldy1oYW5kbGVyJ1xyXG5pbXBvcnQgKiBhcyByZW5kZXJlciBmcm9tICcuL3JlbmRlcmVyJ1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29weUh0bWwoXHJcbiAgdGV4dDogc3RyaW5nLFxyXG4gIGZpbGVQYXRoOiBzdHJpbmcgfCB1bmRlZmluZWQsXHJcbiAgcmVuZGVyTGFUZVg6IGJvb2xlYW4sXHJcbik6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IHZpZXcgPSBuZXcgV2Vidmlld0hhbmRsZXIoYXN5bmMgKCkgPT4ge1xyXG4gICAgdmlldy5pbml0KGF0b20uZ2V0Q29uZmlnRGlyUGF0aCgpLCBhdG9tQ29uZmlnKCkubWF0aENvbmZpZywgJ1NWRycpXHJcbiAgICB2aWV3LnNldEJhc2VQYXRoKGZpbGVQYXRoKVxyXG5cclxuICAgIGNvbnN0IGRvbURvY3VtZW50ID0gYXdhaXQgcmVuZGVyZXIucmVuZGVyKHtcclxuICAgICAgdGV4dCxcclxuICAgICAgZmlsZVBhdGgsXHJcbiAgICAgIHJlbmRlckxhVGVYLFxyXG4gICAgICBtb2RlOiAnY29weScsXHJcbiAgICB9KVxyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdmlldy51cGRhdGUoXHJcbiAgICAgIGRvbURvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vdXRlckhUTUwsXHJcbiAgICAgIHJlbmRlckxhVGVYLFxyXG4gICAgKVxyXG4gICAgaWYgKHJlcykge1xyXG4gICAgICBpZiAoYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMucmljaENsaXBib2FyZCcpKSB7XHJcbiAgICAgICAgY29uc3QgY2xpcGJvYXJkID0gYXdhaXQgaW1wb3J0KCcuL2NsaXBib2FyZCcpXHJcbiAgICAgICAgY2xpcGJvYXJkLndyaXRlKHsgdGV4dDogcmVzLCBodG1sOiByZXMgfSlcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhdG9tLmNsaXBib2FyZC53cml0ZShyZXMpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHZpZXcuZGVzdHJveSgpXHJcbiAgfSlcclxuICB2aWV3LmVsZW1lbnQuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJ1xyXG4gIHZpZXcuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSdcclxuICB2aWV3LmVsZW1lbnQuc3R5bGUud2lkdGggPSAnMHB4J1xyXG4gIHZpZXcuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMHB4J1xyXG4gIGNvbnN0IHdzID0gYXRvbS52aWV3cy5nZXRWaWV3KGF0b20ud29ya3NwYWNlKVxyXG4gIHdzLmFwcGVuZENoaWxkKHZpZXcuZWxlbWVudClcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGF0b21Db25maWcoKSB7XHJcbiAgcmV0dXJuIGF0b20uY29uZmlnLmdldCgnbWFya2Rvd24tcHJldmlldy1wbHVzJylcclxufVxyXG4iXX0=