"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function handlePromise(promise) {
    if (!promise)
        return;
    promise.catch((error) => {
        console.error(error);
        atom.notifications.addFatalError(error.toString(), {
            detail: error.message,
            stack: error.stack,
            dismissable: true,
        });
    });
}
exports.handlePromise = handlePromise;
const fs_1 = require("fs");
function isFileSync(filePath) {
    if (!fs_1.existsSync(filePath))
        return false;
    return fs_1.lstatSync(filePath).isFile();
}
exports.isFileSync = isFileSync;
function pairUp(arr, option) {
    if (arr.length % 2 !== 0) {
        atom.notifications.addWarning(`Invalid math delimiter configuration${option ? `in ${option}` : ''}`, {
            detail: `Expected even number of elements, but got "${arr.join(', ')}"`,
            dismissable: true,
        });
    }
    return arr.reduce(function (result, _value, index, array) {
        if (index % 2 === 0)
            result.push([array[index], array[index + 1]]);
        return result;
    }, []);
}
exports.pairUp = pairUp;
function isElement(node) {
    return node.nodeType === Node.ELEMENT_NODE;
}
exports.isElement = isElement;
const webview_handler_1 = require("./markdown-preview-view/webview-handler");
const renderer = require("./renderer");
async function copyHtml(text, filePath, renderLaTeX) {
    const view = new webview_handler_1.WebviewHandler(async () => {
        view.init(atom.getConfigDirPath(), atomConfig().mathConfig.numberEquations, atomConfig().mathConfig.mjxTeXExtensions, atomConfig().mathConfig.mjxUndefinedFamily);
        view.setUseGitHubStyle(atom.config.get('markdown-preview-plus.useGitHubStyle'));
        view.setBasePath(filePath);
        const domDocument = await renderer.render(text, filePath, undefined, renderLaTeX, 'copy');
        const res = await view.update(domDocument.documentElement.outerHTML, renderLaTeX, 'SVG');
        if (res)
            atom.clipboard.write(res);
        view.destroy();
    });
    view.element.style.pointerEvents = 'none';
    view.element.style.position = 'absolute';
    view.element.style.width = '0px';
    view.element.style.height = '0px';
    const ws = atom.views.getView(atom.workspace);
    ws.appendChild(view.element);
}
exports.copyHtml = copyHtml;
function atomConfig() {
    return atom.config.get('markdown-preview-plus');
}
exports.atomConfig = atomConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUJBQThCLE9BQXFCO0lBQ2pELElBQUksQ0FBQyxPQUFPO1FBQUUsT0FBTTtJQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBWSxFQUFFLEVBQUU7UUFDN0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNwQixJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDakQsTUFBTSxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3JCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixXQUFXLEVBQUUsSUFBSTtTQUNsQixDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFWRCxzQ0FVQztBQUNELDJCQUEwQztBQUMxQyxvQkFBMkIsUUFBZ0I7SUFDekMsSUFBSSxDQUFDLGVBQVUsQ0FBQyxRQUFRLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQTtJQUN2QyxPQUFPLGNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQUNyQyxDQUFDO0FBSEQsZ0NBR0M7QUFFRCxnQkFBMEIsR0FBUSxFQUFFLE1BQWU7SUFDakQsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDeEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQzNCLHVDQUF1QyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUNyRTtZQUNFLE1BQU0sRUFBRSw4Q0FBOEMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRztZQUN2RSxXQUFXLEVBQUUsSUFBSTtTQUNsQixDQUNGLENBQUE7S0FDRjtJQUNELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBZ0IsVUFBUyxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQ3BFLElBQUksS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNsRSxPQUFPLE1BQU0sQ0FBQTtJQUNmLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUNSLENBQUM7QUFkRCx3QkFjQztBQUVELG1CQUEwQixJQUFVO0lBQ2xDLE9BQU8sSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFBO0FBQzVDLENBQUM7QUFGRCw4QkFFQztBQUVELDZFQUF3RTtBQUN4RSx1Q0FBc0M7QUFDL0IsS0FBSyxtQkFDVixJQUFZLEVBQ1osUUFBNEIsRUFDNUIsV0FBb0I7SUFFcEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFDeEUsVUFBVSxFQUFFLENBQUMsVUFBVSxDQUFDLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1FBQ3ZGLElBQUksQ0FBQyxpQkFBaUIsQ0FDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLENBQUMsQ0FDeEQsQ0FBQTtRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUE7UUFFMUIsTUFBTSxXQUFXLEdBQUcsTUFBTSxRQUFRLENBQUMsTUFBTSxDQUN2QyxJQUFJLEVBQ0osUUFBUSxFQUNSLFNBQVMsRUFDVCxXQUFXLEVBQ1gsTUFBTSxDQUNQLENBQUE7UUFDRCxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQzNCLFdBQVcsQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUNyQyxXQUFXLEVBQ1gsS0FBSyxDQUNOLENBQUE7UUFDRCxJQUFJLEdBQUc7WUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNsQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDaEIsQ0FBQyxDQUFDLENBQUE7SUFDRixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFBO0lBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUE7SUFDeEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtJQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO0lBQ2pDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUM3QyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUM5QixDQUFDO0FBbENELDRCQWtDQztBQUVEO0lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO0FBQ2pELENBQUM7QUFGRCxnQ0FFQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBoYW5kbGVQcm9taXNlKHByb21pc2U6IFByb21pc2U8YW55Pik6IHZvaWQge1xyXG4gIGlmICghcHJvbWlzZSkgcmV0dXJuXHJcbiAgcHJvbWlzZS5jYXRjaCgoZXJyb3I6IEVycm9yKSA9PiB7XHJcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKVxyXG4gICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEZhdGFsRXJyb3IoZXJyb3IudG9TdHJpbmcoKSwge1xyXG4gICAgICBkZXRhaWw6IGVycm9yLm1lc3NhZ2UsXHJcbiAgICAgIHN0YWNrOiBlcnJvci5zdGFjayxcclxuICAgICAgZGlzbWlzc2FibGU6IHRydWUsXHJcbiAgICB9KVxyXG4gIH0pXHJcbn1cclxuaW1wb3J0IHsgbHN0YXRTeW5jLCBleGlzdHNTeW5jIH0gZnJvbSAnZnMnXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVTeW5jKGZpbGVQYXRoOiBzdHJpbmcpIHtcclxuICBpZiAoIWV4aXN0c1N5bmMoZmlsZVBhdGgpKSByZXR1cm4gZmFsc2VcclxuICByZXR1cm4gbHN0YXRTeW5jKGZpbGVQYXRoKS5pc0ZpbGUoKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFpclVwPFQ+KGFycjogVFtdLCBvcHRpb24/OiBzdHJpbmcpOiBBcnJheTxbVCwgVF0+IHtcclxuICBpZiAoYXJyLmxlbmd0aCAlIDIgIT09IDApIHtcclxuICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nKFxyXG4gICAgICBgSW52YWxpZCBtYXRoIGRlbGltaXRlciBjb25maWd1cmF0aW9uJHtvcHRpb24gPyBgaW4gJHtvcHRpb259YCA6ICcnfWAsXHJcbiAgICAgIHtcclxuICAgICAgICBkZXRhaWw6IGBFeHBlY3RlZCBldmVuIG51bWJlciBvZiBlbGVtZW50cywgYnV0IGdvdCBcIiR7YXJyLmpvaW4oJywgJyl9XCJgLFxyXG4gICAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgKVxyXG4gIH1cclxuICByZXR1cm4gYXJyLnJlZHVjZTxBcnJheTxbVCwgVF0+PihmdW5jdGlvbihyZXN1bHQsIF92YWx1ZSwgaW5kZXgsIGFycmF5KSB7XHJcbiAgICBpZiAoaW5kZXggJSAyID09PSAwKSByZXN1bHQucHVzaChbYXJyYXlbaW5kZXhdLCBhcnJheVtpbmRleCArIDFdXSlcclxuICAgIHJldHVybiByZXN1bHRcclxuICB9LCBbXSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlbWVudChub2RlOiBOb2RlKTogbm9kZSBpcyBFbGVtZW50IHtcclxuICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREVcclxufVxyXG5cclxuaW1wb3J0IHsgV2Vidmlld0hhbmRsZXIgfSBmcm9tICcuL21hcmtkb3duLXByZXZpZXctdmlldy93ZWJ2aWV3LWhhbmRsZXInXHJcbmltcG9ydCAqIGFzIHJlbmRlcmVyIGZyb20gJy4vcmVuZGVyZXInXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb3B5SHRtbChcclxuICB0ZXh0OiBzdHJpbmcsXHJcbiAgZmlsZVBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZCxcclxuICByZW5kZXJMYVRlWDogYm9vbGVhbixcclxuKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgdmlldyA9IG5ldyBXZWJ2aWV3SGFuZGxlcihhc3luYyAoKSA9PiB7XHJcbiAgICB2aWV3LmluaXQoYXRvbS5nZXRDb25maWdEaXJQYXRoKCksIGF0b21Db25maWcoKS5tYXRoQ29uZmlnLm51bWJlckVxdWF0aW9ucyxcclxuICAgICAgYXRvbUNvbmZpZygpLm1hdGhDb25maWcubWp4VGVYRXh0ZW5zaW9ucywgYXRvbUNvbmZpZygpLm1hdGhDb25maWcubWp4VW5kZWZpbmVkRmFtaWx5KVxyXG4gICAgdmlldy5zZXRVc2VHaXRIdWJTdHlsZShcclxuICAgICAgYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMudXNlR2l0SHViU3R5bGUnKSxcclxuICAgIClcclxuICAgIHZpZXcuc2V0QmFzZVBhdGgoZmlsZVBhdGgpXHJcblxyXG4gICAgY29uc3QgZG9tRG9jdW1lbnQgPSBhd2FpdCByZW5kZXJlci5yZW5kZXIoXHJcbiAgICAgIHRleHQsXHJcbiAgICAgIGZpbGVQYXRoLFxyXG4gICAgICB1bmRlZmluZWQsXHJcbiAgICAgIHJlbmRlckxhVGVYLFxyXG4gICAgICAnY29weScsXHJcbiAgICApXHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCB2aWV3LnVwZGF0ZShcclxuICAgICAgZG9tRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm91dGVySFRNTCxcclxuICAgICAgcmVuZGVyTGFUZVgsXHJcbiAgICAgICdTVkcnLFxyXG4gICAgKVxyXG4gICAgaWYgKHJlcykgYXRvbS5jbGlwYm9hcmQud3JpdGUocmVzKVxyXG4gICAgdmlldy5kZXN0cm95KClcclxuICB9KVxyXG4gIHZpZXcuZWxlbWVudC5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnXHJcbiAgdmlldy5lbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJ1xyXG4gIHZpZXcuZWxlbWVudC5zdHlsZS53aWR0aCA9ICcwcHgnXHJcbiAgdmlldy5lbGVtZW50LnN0eWxlLmhlaWdodCA9ICcwcHgnXHJcbiAgY29uc3Qgd3MgPSBhdG9tLnZpZXdzLmdldFZpZXcoYXRvbS53b3Jrc3BhY2UpXHJcbiAgd3MuYXBwZW5kQ2hpbGQodmlldy5lbGVtZW50KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXRvbUNvbmZpZygpIHtcclxuICByZXR1cm4gYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMnKVxyXG59XHJcbiJdfQ==