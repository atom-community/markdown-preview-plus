"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function handlePromise(promise) {
    if (!promise)
        return;
    promise.catch((error) => {
        console.error(error);
        atom.notifications.addFatalError(error.toString(), {
            detail: error.message,
            stack: error.stack,
            dismissable: true,
        });
    });
}
exports.handlePromise = handlePromise;
const fs_1 = require("fs");
function isFileSync(filePath) {
    if (!fs_1.existsSync(filePath))
        return false;
    return fs_1.lstatSync(filePath).isFile();
}
exports.isFileSync = isFileSync;
function pairUp(arr, option) {
    if (arr.length % 2 !== 0) {
        atom.notifications.addWarning(`Invalid math delimiter configuration${option ? `in ${option}` : ''}`, {
            detail: `Expected even number of elements, but got "${arr.join(', ')}"`,
            dismissable: true,
        });
    }
    return arr.reduce(function (result, _value, index, array) {
        if (index % 2 === 0)
            result.push([array[index], array[index + 1]]);
        return result;
    }, []);
}
exports.pairUp = pairUp;
function isElement(node) {
    return node.nodeType === Node.ELEMENT_NODE;
}
exports.isElement = isElement;
const webview_handler_1 = require("./markdown-preview-view/webview-handler");
const renderer = require("./renderer");
async function copyHtml(text, filePath, renderLaTeX) {
    const view = new webview_handler_1.WebviewHandler(async () => {
        view.init(atom.getConfigDirPath(), atomConfig().mathConfig);
        view.setUseGitHubStyle(atom.config.get('markdown-preview-plus.useGitHubStyle'));
        view.setBasePath(filePath);
        const domDocument = await renderer.render(text, filePath, undefined, renderLaTeX, 'copy');
        const res = await view.update(domDocument.documentElement.outerHTML, renderLaTeX, 'SVG');
        if (res)
            atom.clipboard.write(res);
        view.destroy();
    });
    view.element.style.pointerEvents = 'none';
    view.element.style.position = 'absolute';
    view.element.style.width = '0px';
    view.element.style.height = '0px';
    const ws = atom.views.getView(atom.workspace);
    ws.appendChild(view.element);
}
exports.copyHtml = copyHtml;
function atomConfig() {
    return atom.config.get('markdown-preview-plus');
}
exports.atomConfig = atomConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUJBQThCLE9BQXFCO0lBQ2pELElBQUksQ0FBQyxPQUFPO1FBQUUsT0FBTTtJQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBWSxFQUFFLEVBQUU7UUFDN0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNwQixJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDakQsTUFBTSxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3JCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixXQUFXLEVBQUUsSUFBSTtTQUNsQixDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFWRCxzQ0FVQztBQUNELDJCQUEwQztBQUMxQyxvQkFBMkIsUUFBZ0I7SUFDekMsSUFBSSxDQUFDLGVBQVUsQ0FBQyxRQUFRLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQTtJQUN2QyxPQUFPLGNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQUNyQyxDQUFDO0FBSEQsZ0NBR0M7QUFFRCxnQkFBMEIsR0FBUSxFQUFFLE1BQWU7SUFDakQsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDeEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQzNCLHVDQUF1QyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUNyRTtZQUNFLE1BQU0sRUFBRSw4Q0FBOEMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRztZQUN2RSxXQUFXLEVBQUUsSUFBSTtTQUNsQixDQUNGLENBQUE7S0FDRjtJQUNELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBZ0IsVUFBUyxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQ3BFLElBQUksS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNsRSxPQUFPLE1BQU0sQ0FBQTtJQUNmLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUNSLENBQUM7QUFkRCx3QkFjQztBQUVELG1CQUEwQixJQUFVO0lBQ2xDLE9BQU8sSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFBO0FBQzVDLENBQUM7QUFGRCw4QkFFQztBQUVELDZFQUF3RTtBQUN4RSx1Q0FBc0M7QUFDL0IsS0FBSyxtQkFDVixJQUFZLEVBQ1osUUFBNEIsRUFDNUIsV0FBb0I7SUFFcEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDM0QsSUFBSSxDQUFDLGlCQUFpQixDQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUN4RCxDQUFBO1FBQ0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUUxQixNQUFNLFdBQVcsR0FBRyxNQUFNLFFBQVEsQ0FBQyxNQUFNLENBQ3ZDLElBQUksRUFDSixRQUFRLEVBQ1IsU0FBUyxFQUNULFdBQVcsRUFDWCxNQUFNLENBQ1AsQ0FBQTtRQUNELE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FDM0IsV0FBVyxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQ3JDLFdBQVcsRUFDWCxLQUFLLENBQ04sQ0FBQTtRQUNELElBQUksR0FBRztZQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2xDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNoQixDQUFDLENBQUMsQ0FBQTtJQUNGLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUE7SUFDekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQTtJQUN4QyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO0lBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUE7SUFDakMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQzdDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQzlCLENBQUM7QUFqQ0QsNEJBaUNDO0FBRUQ7SUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUE7QUFDakQsQ0FBQztBQUZELGdDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZVByb21pc2UocHJvbWlzZTogUHJvbWlzZTxhbnk+KTogdm9pZCB7XHJcbiAgaWYgKCFwcm9taXNlKSByZXR1cm5cclxuICBwcm9taXNlLmNhdGNoKChlcnJvcjogRXJyb3IpID0+IHtcclxuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXHJcbiAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRmF0YWxFcnJvcihlcnJvci50b1N0cmluZygpLCB7XHJcbiAgICAgIGRldGFpbDogZXJyb3IubWVzc2FnZSxcclxuICAgICAgc3RhY2s6IGVycm9yLnN0YWNrLFxyXG4gICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcclxuICAgIH0pXHJcbiAgfSlcclxufVxyXG5pbXBvcnQgeyBsc3RhdFN5bmMsIGV4aXN0c1N5bmMgfSBmcm9tICdmcydcclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsZVN5bmMoZmlsZVBhdGg6IHN0cmluZykge1xyXG4gIGlmICghZXhpc3RzU3luYyhmaWxlUGF0aCkpIHJldHVybiBmYWxzZVxyXG4gIHJldHVybiBsc3RhdFN5bmMoZmlsZVBhdGgpLmlzRmlsZSgpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYWlyVXA8VD4oYXJyOiBUW10sIG9wdGlvbj86IHN0cmluZyk6IEFycmF5PFtULCBUXT4ge1xyXG4gIGlmIChhcnIubGVuZ3RoICUgMiAhPT0gMCkge1xyXG4gICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZFdhcm5pbmcoXHJcbiAgICAgIGBJbnZhbGlkIG1hdGggZGVsaW1pdGVyIGNvbmZpZ3VyYXRpb24ke29wdGlvbiA/IGBpbiAke29wdGlvbn1gIDogJyd9YCxcclxuICAgICAge1xyXG4gICAgICAgIGRldGFpbDogYEV4cGVjdGVkIGV2ZW4gbnVtYmVyIG9mIGVsZW1lbnRzLCBidXQgZ290IFwiJHthcnIuam9pbignLCAnKX1cImAsXHJcbiAgICAgICAgZGlzbWlzc2FibGU6IHRydWUsXHJcbiAgICAgIH0sXHJcbiAgICApXHJcbiAgfVxyXG4gIHJldHVybiBhcnIucmVkdWNlPEFycmF5PFtULCBUXT4+KGZ1bmN0aW9uKHJlc3VsdCwgX3ZhbHVlLCBpbmRleCwgYXJyYXkpIHtcclxuICAgIGlmIChpbmRleCAlIDIgPT09IDApIHJlc3VsdC5wdXNoKFthcnJheVtpbmRleF0sIGFycmF5W2luZGV4ICsgMV1dKVxyXG4gICAgcmV0dXJuIHJlc3VsdFxyXG4gIH0sIFtdKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNFbGVtZW50KG5vZGU6IE5vZGUpOiBub2RlIGlzIEVsZW1lbnQge1xyXG4gIHJldHVybiBub2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERVxyXG59XHJcblxyXG5pbXBvcnQgeyBXZWJ2aWV3SGFuZGxlciB9IGZyb20gJy4vbWFya2Rvd24tcHJldmlldy12aWV3L3dlYnZpZXctaGFuZGxlcidcclxuaW1wb3J0ICogYXMgcmVuZGVyZXIgZnJvbSAnLi9yZW5kZXJlcidcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvcHlIdG1sKFxyXG4gIHRleHQ6IHN0cmluZyxcclxuICBmaWxlUGF0aDogc3RyaW5nIHwgdW5kZWZpbmVkLFxyXG4gIHJlbmRlckxhVGVYOiBib29sZWFuLFxyXG4pOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCB2aWV3ID0gbmV3IFdlYnZpZXdIYW5kbGVyKGFzeW5jICgpID0+IHtcclxuICAgIHZpZXcuaW5pdChhdG9tLmdldENvbmZpZ0RpclBhdGgoKSwgYXRvbUNvbmZpZygpLm1hdGhDb25maWcpXHJcbiAgICB2aWV3LnNldFVzZUdpdEh1YlN0eWxlKFxyXG4gICAgICBhdG9tLmNvbmZpZy5nZXQoJ21hcmtkb3duLXByZXZpZXctcGx1cy51c2VHaXRIdWJTdHlsZScpLFxyXG4gICAgKVxyXG4gICAgdmlldy5zZXRCYXNlUGF0aChmaWxlUGF0aClcclxuXHJcbiAgICBjb25zdCBkb21Eb2N1bWVudCA9IGF3YWl0IHJlbmRlcmVyLnJlbmRlcihcclxuICAgICAgdGV4dCxcclxuICAgICAgZmlsZVBhdGgsXHJcbiAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgcmVuZGVyTGFUZVgsXHJcbiAgICAgICdjb3B5JyxcclxuICAgIClcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHZpZXcudXBkYXRlKFxyXG4gICAgICBkb21Eb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub3V0ZXJIVE1MLFxyXG4gICAgICByZW5kZXJMYVRlWCxcclxuICAgICAgJ1NWRycsXHJcbiAgICApXHJcbiAgICBpZiAocmVzKSBhdG9tLmNsaXBib2FyZC53cml0ZShyZXMpXHJcbiAgICB2aWV3LmRlc3Ryb3koKVxyXG4gIH0pXHJcbiAgdmlldy5lbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSdcclxuICB2aWV3LmVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnXHJcbiAgdmlldy5lbGVtZW50LnN0eWxlLndpZHRoID0gJzBweCdcclxuICB2aWV3LmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzBweCdcclxuICBjb25zdCB3cyA9IGF0b20udmlld3MuZ2V0VmlldyhhdG9tLndvcmtzcGFjZSlcclxuICB3cy5hcHBlbmRDaGlsZCh2aWV3LmVsZW1lbnQpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhdG9tQ29uZmlnKCkge1xyXG4gIHJldHVybiBhdG9tLmNvbmZpZy5nZXQoJ21hcmtkb3duLXByZXZpZXctcGx1cycpXHJcbn1cclxuIl19